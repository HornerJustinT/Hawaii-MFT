{"version":3,"sources":["redux/reducers/errorsReducer.js","redux/reducers/loginModeReducer.js","redux/reducers/membersReducer.js","redux/reducers/profileReducer.js","redux/reducers/userReducer.js","redux/reducers/fetchLanguages.js","redux/reducers/IslandReducer.js","redux/reducers/specialityReducer.js","redux/reducers/insuranceTakenReducer.js","redux/reducers/fetchLicenseType.js","redux/reducers/treatmentReducer.js","redux/reducers/clientFocusReducer.js","redux/reducers/ageGroupsReducer.js","redux/reducers/sessionFormatReducer.js","redux/reducers/profileCreateReducer.js","redux/reducers/contactAddressReducer.js","redux/reducers/index.js","redux/sagas/createSaga.js","redux/sagas/deleteSaga.js","redux/sagas/editBasicSaga.js","redux/sagas/editContactSaga.js","redux/sagas/editPracticeSaga.js","redux/sagas/fetchMemberSaga.js","redux/sagas/fetchMemberSageAdvanced.js","redux/sagas/fetchProfileSaga.js","redux/sagas/loginSaga.js","redux/sagas/registrationSaga.js","redux/sagas/userSaga.js","redux/sagas/index.js","components/LogOutButton/LogOutButton.js","components/NavBootstrap/NavBootstrap.js","components/Footer/Footer.js","components/LoginPage/LoginPage.js","components/RegisterPage/RegisterPage.js","components/ProtectedRoute/ProtectedRoute.js","components/AdminRoute/AdminRoute.js","components/ContactPage/ContactPage.js","components/ProfileEdit/ProfileEdit.js","components/SearchResults/SearchResults.js","components/SearchSelect/SearchSelect.js","components/SearchBar/SearchBar.js","components/HomePage/HomePage.js","components/ProfileCreate/ProfileCreate.js","components/ProfileCreate/ContactInfo/ContactInfo.js","components/ProfileCreate/PracticeInfo/PracticeInfo.js","components/EmailModal/EmailModal.js","components/ProfileView/ProfileView.js","components/AdminPage/AdminPage.js","components/App/App.js","index.js"],"names":["combineReducers","loginMessage","state","action","type","registrationMessage","loginMode","membersReducer","payload","profileReducer","userReducer","languageReducer","IslandReducer","specialityReducer","insuranceTakenReducer","licenseTypeReducer","treatmentReducer","clientFocusReducer","ageGroupReducer","sessionFormatReducer","profileCreateReducer","contactAddressReducer","rootReducer","ageGroups","contactAddress","createProfile","demographics","errors","insuranceTaken","islands","languages","license","members","profile","sessionFormats","specialtys","treatmentPreferences","user","addMember","addCreateProfile","addAddress","fetchLanguages","fetchIslands","fetchSpecialty","fetchSupervision","fetchInsuranceTaken","fetchLicenseType","fetchTreatmentApproaches","fetchDemographics","fetchAgeGroups","fetchSessionFormat","createSaga","console","log","axios","post","put","id","get","response","data","takeLatest","deleteProfile","deleteSaga","delete","editBasic","editBasicSaga","editContact","editContactSaga","editPractice","editPracticeSaga","fetchMembers","fetchMemberSaga","fetchMembersAdvanced","fetchProfile","fetchProfileSaga","loginUser","logoutUser","loginSaga","config","headers","withCredentials","status","registerUser","registrationSaga","fetchUser","userSaga","rootSaga","all","fetchMemberSageAdvanced","LogOutButton","handleClick","props","dispatch","history","push","NavDropdown","Item","onClick","Component","withRouter","connect","NavBar","Navbar","collapseOnSelect","expand","bg","variant","Toggle","aria-controls","Collapse","Nav","className","title","href","this","Divider","Brand","Link","eventKey","Footer","LoginPage","username","password","login","event","preventDefault","handleInputChangeFor","propertyName","setState","target","value","role","onSubmit","htmlFor","name","onChange","Button","RegisterPage","ComponentToShow","ComponentToProtect","component","otherProps","admin","AboutPage","ProfileEdit","clickBasic","clickContact","clickPractice","languagesEdit","treatmentApproaches","syncDataEditLanguage","reducerName","profileName","map","lang","filter","object","language_id","syncDataEditIsland","island","handleEditBasic","handleSaveBasic","handleEditContact","handleSaveContact","handleEditPractice","handleSavePractice","handleChange","handleLangChange","editPropertyName","viewPropertyName","array","selectedOptions","option","Number","updatedLanguages","handleIslandChange","updatedIsland","island_id","displayLanguages","Form","Group","Label","Control","as","multiple","key","disabled","readOnly","defaultValue","displayIslands","islandEdit","match","params","previousProps","phone","prefix","firstName","first_name","lastName","last_name","age","address","city","email","zipCode","zip_code","website","credentials","licenseState","license_state","licenseExpiration","license_expiration","licenseNumber","license_number","licenseType","license_type","hiamftMemberInfo","hiamft_member_account_info","supervisionStatus","supervision_status","fees","telehealth","statement","agesServed","ages_served","clientFocus","client_focus","insurance","sessionFormat","session_format","specialty","speciaty","treatment_preferences","Text","rows","specialties","reduxStore","treatments","SearchResults","therapists","length","therapist","Card","style","width","margin","Body","Title","Subtitle","rel","SearchSelect","controlId","Object","keys","criteria","SearchBar","restart","advancedSearchSubmit","query","queryCriteria","replace","onSearchChange","basic_search","onSearchChangeAdv","onSearchClicked","onTelehealthChange","checked","parseSearchData","parse","Array","isArray","item","switchChange","advanced","placeholder","Check","label","float","InputGroup","aria-label","aria-describedby","Append","HomePage","ProfileCreate","handleReset","addMembers","getLanguages","handleNext","ProgressBar","now","language","reduxstate","ContactInfo","business_number","personal_number","personal_email","address_office","address_home","address_mailing","handleBack","addContactInfo","PracticeInfo","session_format_id","client_focus_id","specialty_id","treatment_preferences_id","age_groups_served_id","addMembersInfo","license_type_id","insurance_type_id","licensetype","treatment","group","agegroup","session","useState","show","setShow","handleClose","Modal","onHide","Header","closeButton","plaintext","API_KEY","process","mapStyles","height","ProfileView","lat","lng","doesTelehealth","setMAP","url_address","encodeURI","fetch","then","json","results","geometry","location","onMarkerClick","marker","e","selectedPlace","activeMarker","showingInfoWindow","onMapClicked","home","google","center","zoom","position","GoogleApiWrapper","apiKey","AdminPage","island_city_zip","resetProfile","searchTherapists","hasOwnProperty","element","Mainkey","onSelectChange","deleteFilter","addFilter","objectToCsv","csvRows","join","row","values","header","escaped","downloadClick","blob","Blob","csv","FileSaver","saveAs","prevProps","prevState","FormControl","charAt","toUpperCase","slice","split","Table","striped","bordered","hover","license_title","textAlign","download","App","exact","from","to","path","ContactPage","AdminRoute","render","sagaMiddleware","createSagaMiddleware","middlewareList","store","createStore","applyMiddleware","run","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.b49e252e.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\n\n// loginMessage holds the string that will display\n// on the login screen if there's an error\nconst loginMessage = (state = '', action) => {\n  switch (action.type) {\n    case 'CLEAR_LOGIN_ERROR':\n      return '';\n    case 'LOGIN_INPUT_ERROR':\n      return 'Enter your username and password!';\n    case 'LOGIN_FAILED':\n      return 'Oops! The username and password didn\\'t match. Try again!';\n    case 'LOGIN_FAILED_NO_CODE':\n      return 'Oops! Something went wrong! Is the server running?';\n    default:\n      return state;\n  }\n};\n\n// registrationMessage holds the string that will display\n// on the registration screen if there's an error\nconst registrationMessage = (state = '', action) => {\n  switch (action.type) {\n    case 'CLEAR_REGISTRATION_ERROR':\n      return '';\n    case 'REGISTRATION_INPUT_ERROR':\n      return 'Choose a username and password!';\n    case 'REGISTRATION_FAILED':\n      return 'Oops! That didn\\'t work. The username might already be taken. Try again!';\n    default:\n      return state;\n  }\n};\n\n// make one object that has keys loginMessage, registrationMessage\n// these will be on the redux state at:\n// state.errors.loginMessage and state.errors.registrationMessage\nexport default combineReducers({\n  loginMessage,\n  registrationMessage,\n});\n","const loginMode = (state = 'login', action) => {\n    switch (action.type) {\n      case 'SET_TO_LOGIN_MODE':\n        return 'login';\n      case 'SET_TO_REGISTER_MODE':\n        return 'register';\n      default:\n        return state;\n    }\n  };\n\n// loginMode will be on the redux state at:\n// state.loginMode\n  export default loginMode;\n  ","//holds all the members and their information\nconst membersReducer = (state = [], action) => {\n    if (action.type === 'GET_MEMBERS_REDUCER') {\n        return action.payload;\n    } \n    return state;\n};\n\nexport default membersReducer;","//holds all the profile details for one specific user\n\nconst profileReducer = (state = {}, action) => {\n    if (action.type === 'GET_PROFILE_REDUCER') {\n        return action.payload[0];\n    } else if (action.type === 'PROFILE_RESET') {\n        return {}\n    } else {\n     return state;\n    }\n};\n\nexport default profileReducer;\n","const userReducer = (state = {}, action) => {\n  switch (action.type) {\n    case 'SET_USER':\n      return action.payload;\n    case 'UNSET_USER':\n      return {};\n    default:\n      return state;\n  }\n};\n\n// user will be on the redux state at:\n// state.user\nexport default userReducer;\n","//holds all the languages from the languages table\n//all possible selection options for user\nconst languageReducer = (state = [], action) => {\n    if (action.type === 'SET_LANGUAGES') {\n        return action.payload;\n    } \n    return state;\n};\n\nexport default languageReducer;\n\n\n\n ","//holds all the islands from the islands table\n//all possible selection options for user\nconst IslandReducer = (state = [], action) => {\n    if (action.type === 'SET_ISLANDS') {\n        return action.payload;\n    } \n    return state;\n};\n\nexport default IslandReducer ;","//holds all the specialties from the specialties table\n//all possible selection options for user\nconst specialityReducer = (state = [], action) => {\n    if (action.type === 'SET_SPECIALTY') {\n        return action.payload;\n    } \n    return state;\n};\n\nexport default specialityReducer;","//holds all the insurance types from the insurance table\n//all possible selection options for user\nconst insuranceTakenReducer = (state = [], action) => {\n    if (action.type === 'SET_INSURANCE_TAKEN') {\n        return action.payload;\n    } \n    return state;\n};\n\nexport default insuranceTakenReducer;","//holds all the license types from the license type table\n//all possible selection options for user\nconst licenseTypeReducer = (state = [], action) => {\n    if (action.type === 'SET_LICENSE_TYPE') {\n        return action.payload;\n    } \n    return state;\n};\n\nexport default licenseTypeReducer;","//holds all the treatments from the treatment preferences table\n//all possible selection options for user\nconst treatmentReducer = (state = [], action) => {\n    if (action.type === 'SET_TREATMENT_APPROACHES') {\n        return action.payload;\n    } \n    return state;\n};\n\nexport default treatmentReducer;","const clientFocusReducer = (state = [], action) => {\n    if (action.type === 'SET_DEMOGRPHICS') {\n        return action.payload;\n    } \n    return state;\n};\n\nexport default clientFocusReducer;","const ageGroupReducer = (state = [], action) => {\n    if (action.type === 'SET_AGE_GROUPS') {\n        return action.payload;\n    } \n    return state;\n};\n\nexport default ageGroupReducer;","const sessionFormatReducer = (state = [], action) => {\n    if (action.type === 'SET_SESSION_FORMAT') {\n        return action.payload;\n    } \n    return state;\n};\n\nexport default sessionFormatReducer;","const profileCreateReducer = (state = [], action) => {\n    if (action.type === 'SET_CREATE_PROFILE') {\n        return action.payload;\n    } \n    return state;\n};\n\nexport default profileCreateReducer;","const contactAddressReducer = (state = [], action) => {\n    if (action.type === 'SET_ADDRESS') {\n        return action.payload;\n    } \n    return state;\n};\n\nexport default contactAddressReducer;","import { combineReducers } from 'redux';\nimport errors from './errorsReducer';\nimport loginMode from './loginModeReducer';\nimport members from './membersReducer';\nimport profile from './profileReducer';\nimport user from './userReducer';\nimport languages from './fetchLanguages';\nimport islands from './IslandReducer';\nimport specialtys from './specialityReducer';\nimport insuranceTaken from './insuranceTakenReducer';\nimport license from './fetchLicenseType';\nimport treatmentPreferences from './treatmentReducer';\nimport demographics from './clientFocusReducer';\nimport ageGroups from './ageGroupsReducer';\nimport sessionFormats from './sessionFormatReducer';\nimport createProfile from './profileCreateReducer';\nimport contactAddress from './contactAddressReducer';\n\n\n// rootReducer is the primary reducer for our entire project\n// It bundles up all of the other reducers so our project can use them.\n// This is imported in index.js as rootSaga\n\n// Lets make a bigger object for our store, with the objects from our reducers.\n// This is what we get when we use 'state' inside of 'mapStateToProps'\nconst rootReducer = combineReducers({\n  ageGroups, //will have all the age group served\n  contactAddress, //will have zipCode and City for members table\n  createProfile, // will have some of the inputs for members table from createProfile page\n  demographics, //will have all the client focus demographics\n  errors, // contains registrationMessage and loginMessage\n  insuranceTaken, //will have all insurance types used\n  islands, //will have all the islands names on ready\n  languages, // will have all the language options when creating a profile\n  license, //will have all the licesne types members have\n  loginMode, // will have a value of 'login' or 'registration' to control which screen is shown\n  members, //will have all members\n  profile, //will have specific user profile details\n  sessionFormats, // will have all the session formats\n  specialtys, //will have all the info about the practice for the members\n  treatmentPreferences, // will have all the treament approaches\n  user, // will have an id and username if someone is logged in\n});\n\nexport default rootReducer;\n","import axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects';\n\n//will post data from ADD_MEMBER action \nfunction* addMember(action) {\n    console.log('in addMember Saga', action.payload)\n    try {\n       const response = yield axios.post(`api/profile`, action.payload);\n        yield put({ type: 'FETCH_PROFILE_REDUCER', payload: action.payload.id });\n    } catch (error) {\n        console.log('Error in sending members info to the server', error);\n    }\n}\n\n\n//will pass the info from the createprofile page into SET_CREATE_PROFILE reducer\n\nfunction* addCreateProfile (action) {\n    console.log('in createProfile saga', action.payload)\n    try {\n     \n       yield put ({type: 'SET_CREATE_PROFILE', payload: action.payload});\n    } catch (error) {\n        console.log('createProfile reducer failed', error);\n    }\n}\n\n//will pass the info from contactInfo page into SET_ADDRESS reducer\nfunction* addAddress(action) {\n    console.log('in createProfile saga', action.payload)\n    try {\n     \n       yield put ({type: 'SET_ADDRESS', payload: action.payload});\n    } catch (error) {\n        console.log('Contact Info reducer failed', error);\n    }\n}\n\n\n\n\n//will fetch all the languages in in createProfile page\nfunction* fetchLanguages(action){\n    try{\n        const response = yield axios.get(`/api/profile/languages`)\n        yield put ({type: 'SET_LANGUAGES', payload: response.data});\n    }\n    catch(error){\n        console.log('error in fetching languages', error)\n    }\n}\n\n//will fetch all the island options in contactInfo\nfunction* fetchIslands(action){\n    try{\n        const response = yield axios.get(`/api/profile/islands`)\n        yield put ({type: 'SET_ISLANDS', payload: response.data});\n    }\n    catch(error){\n        console.log('error in fetching Islands', error)\n    }\n}\n\n//will fetch all the specialty options for practiceInfo page\nfunction* fetchSpecialty(action){\n    try{\n        const response = yield axios.get(`/api/profile/specialty`)\n        yield put ({type: 'SET_SPECIALTY', payload: response.data});\n    }\n    catch(error){\n        console.log('error in fetching Specialty', error)\n    }\n}\n\n//will fetch all the supervision status in practiceInfo page\nfunction* fetchSupervision(action){\n    try{\n        const response = yield axios.get(`/api/profile/supervision`)\n        yield put ({type: 'SET_SUPERVISION_STATUS', payload: response.data});\n    }\n    catch(error){\n        console.log('error in fetching Islands', error)\n    }\n}\n\n//will fetch all the Insurance type in parcticeinfo page\nfunction* fetchInsuranceTaken (action){\n    try{\n        const response = yield axios.get(`/api/profile/insurance`)\n        yield put ({type: 'SET_INSURANCE_TAKEN', payload: response.data});\n    }\n    catch(error){\n        console.log('error in fetching Insurance', error)\n    }\n}\n\n//will fetch all the license type in practiceinfo page\nfunction* fetchLicenseType (action){\n    try{\n        const response = yield axios.get(`/api/profile/license`)\n        yield put ({type: 'SET_LICENSE_TYPE', payload: response.data});\n    }\n    catch(error){\n        console.log('error in fetching License Type', error)\n    }\n}\n\n//will fetch all the treatment preferences in practiceinfo page\nfunction* fetchTreatmentApproaches (action){\n    try{\n        const response = yield axios.get(`/api/profile/treatment`)\n        yield put ({type: 'SET_TREATMENT_APPROACHES', payload: response.data});\n    }\n    catch(error){\n        console.log('error in fetching treatment approaches', error)\n    }\n}\n\n//will fetch all the client type groups in practiceinfo page\nfunction* fetchDemographics (action){\n    try{\n        const response = yield axios.get(`/api/profile/demographics`)\n        yield put ({type: 'SET_DEMOGRPHICS', payload: response.data});\n    }\n    catch(error){\n        console.log('error in fetching demographics', error)\n    }\n}\n\n//will fetch all the age group in practiceinfo page\nfunction* fetchAgeGroups (action){\n    try{\n        const response = yield axios.get(`/api/profile/age`)\n        yield put ({type: 'SET_AGE_GROUPS', payload: response.data});\n    }\n    catch(error){\n        console.log('error in fetching age group served', error)\n    }\n}\n\n//will fetch all the session format options in practiceinfo page\nfunction* fetchSessionFormat (action){\n    try{\n        const response = yield axios.get(`/api/profile/session`)\n        yield put ({type: 'SET_SESSION_FORMAT', payload: response.data});\n    }\n    catch(error){\n        console.log('error in fetching session format', error)\n    }\n}\n\nfunction* createSaga() {\n    yield takeLatest('ADD_CREATE_PROFILE', addCreateProfile);\n    yield takeLatest('FETCH_LANGUAGES', fetchLanguages);\n    yield takeLatest('FETCH_ISLANDS', fetchIslands);\n    yield takeLatest('FETCH_SPECIALTY', fetchSpecialty);\n    yield takeLatest('FETCH_SUPERVISION_STATUS',fetchSupervision);\n    yield takeLatest('FETCH_INSURANCE_TAKEN',fetchInsuranceTaken);\n    yield takeLatest('FETCH_LICENSE_TYPE',fetchLicenseType);\n    yield takeLatest('FETCH_TREATMENT_APPROACHES',fetchTreatmentApproaches);\n    yield takeLatest('FETCH_DEMOGRPHICS',fetchDemographics);\n    yield takeLatest('FETCH_AGE_GROUPS', fetchAgeGroups);\n    yield takeLatest('FETCH_SESSION_FORMAT', fetchSessionFormat);\n    yield takeLatest('ADD_ADDRESS', addAddress);\n    yield takeLatest('ADD_MEMBER', addMember);\n  \n \n   \n}\n\nexport default createSaga;","import axios from 'axios';\nimport { takeLatest } from 'redux-saga/effects';\n\n// will be fired on \"DELETE_PROFILE\" actions\nfunction* deleteProfile(action) {\n    try {\n        yield axios.delete(`/profile/${action.payload.id}`);\n    } catch (error) {\n        console.log('deleteProfile saga DELETE request failed', error);\n    }\n}\n\nfunction* deleteSaga() {\n    yield takeLatest('DELETE_PROFILE', deleteProfile);\n}\n\nexport default deleteSaga;","import axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects';\n\n// will be fired on \"EDIT_PROFILE\" actions\nfunction* editBasic(action) {\n    try {\n        yield axios.put('/profile', action.payload);\n        yield put({ type: 'FETCH_PROFILE_REDUCER', payload: action.payload });\n    } catch (error) {\n        console.log('editProfile PUT request failed', error);\n    }\n}\n\nfunction* editBasicSaga() {\n    yield takeLatest('EDIT_BASIC', editBasic);\n}\n\nexport default editBasicSaga;","import axios from \"axios\";\nimport { put, takeLatest } from \"redux-saga/effects\";\n\n// will be fired on \"EDIT_CONTACT\" actions\nfunction* editContact(action) {\n  try {\n    yield axios.put(\"/profile/contact\", action.payload);\n    yield put({ type: \"FETCH_PROFILE_REDUCER\", payload: action.payload });\n  } catch (error) {\n    console.log(\"editContact PUT request failed\", error);\n  }\n}\n\nfunction* editContactSaga() {\n  yield takeLatest(\"EDIT_CONTACT\", editContact);\n}\n\nexport default editContactSaga;\n","import axios from \"axios\";\nimport { put, takeLatest } from \"redux-saga/effects\";\n\n// will be fired on \"EDIT_PRACTICE\" actions\nfunction* editPractice(action) {\n  try {\n    yield axios.put(\"/profile/practice\", action.payload);\n    yield put({ type: \"FETCH_PROFILE_REDUCER\", payload: action.payload });\n  } catch (error) {\n    console.log(\"editContact PUT request failed\", error);\n  }\n}\n\nfunction* editPracticeSaga() {\n  yield takeLatest(\"EDIT_PRACTICE\", editPractice);\n}\n\nexport default editPracticeSaga;\n","import axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects';\n\n// will be fired on \"FETCH_MEMBERS\" actions\n//initiates GET request when HOME PAGE loads\nfunction* fetchMembers(action) {\n    try {\n        \n        if (action.payload) {\n            const response = yield axios.get(`/api/search/${action.payload}`)\n            yield put({ type: 'GET_MEMBERS_REDUCER', payload: response.data });\n        } else {\n            const response = yield axios.get(`/api/search`)\n            yield put({ type: 'GET_MEMBERS_REDUCER', payload: response.data });\n        }\n    } catch (error) {\n        console.log('fetchMembers saga GET request failed', error);\n    }\n}\n\n\nfunction* fetchMemberSaga() {\n    yield takeLatest('FETCH_MEMBERS', fetchMembers);\n}\n\nexport default fetchMemberSaga;","import axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects';\n\n// will be fired on \"FETCH_MEMBERS\" actions\n//initiates GET request when HOME PAGE loads\nfunction* fetchMembersAdvanced(action) {\n    try {\n        const response = yield axios.get(`/api/advanced?${action.payload}`)\n        yield put({ type: 'GET_MEMBERS_REDUCER', payload: response.data });\n    } catch (error) {\n        console.log('fetchMembers saga GET request failed', error);\n    }\n}\n\n\nfunction* fetchMemberSaga() {\n    yield takeLatest('FETCH_MEMBERS_ADVANCED', fetchMembersAdvanced);\n}\n\nexport default fetchMemberSaga;","import axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects';\n\n// will be fired on \"FETCH_PROFILE\" actions\n//initiates GET request when profile views load\nfunction* fetchProfile(action) {\n    try {\n        const response = yield axios.get(`/profile/${action.payload.id}`);\n        //sends data to the profile reducer of one specific member\n        yield put({ type: 'GET_PROFILE_REDUCER', payload: response.data });\n    } catch (error) {\n        console.log('fetchProfile saga GET request failed', error);\n    }\n}\n\nfunction* fetchProfileSaga() {\n    yield takeLatest('FETCH_PROFILE', fetchProfile);\n}\n\nexport default fetchProfileSaga;","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// worker Saga: will be fired on \"LOGIN\" actions\nfunction* loginUser(action) {\n  try {\n    // clear any existing error on the login page\n    yield put({ type: 'CLEAR_LOGIN_ERROR' });\n\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // send the action.payload as the body\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    yield axios.post('/api/user/login', action.payload, config);\n    \n    // after the user has logged in\n    // get the user information from the server\n    yield put({type: 'FETCH_USER'});\n  } catch (error) {\n    console.log('Error with user login:', error);\n    if (error.response.status === 401) {\n      // The 401 is the error status sent from passport\n      // if user isn't in the database or\n      // if the username and password don't match in the database\n      yield put({ type: 'LOGIN_FAILED' });\n    } else {\n      // Got an error that wasn't a 401\n      // Could be anything, but most common cause is the server is not started\n      yield put({ type: 'LOGIN_FAILED_NO_CODE' });\n    }\n  }\n}\n\n// worker Saga: will be fired on \"LOGOUT\" actions\nfunction* logoutUser(action) {\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    // when the server recognizes the user session\n    // it will end the session\n    yield axios.post('/api/user/logout', config);\n\n    // now that the session has ended on the server\n    // remove the client-side user object to let\n    // the client-side code know the user is logged out\n    yield put({ type: 'UNSET_USER' });\n\n  } catch (error) {\n    console.log('Error with user logout:', error);\n  }\n}\n\nfunction* loginSaga() {\n  yield takeLatest('LOGIN', loginUser);\n  yield takeLatest('LOGOUT', logoutUser);\n}\n\nexport default loginSaga;\n","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// worker Saga: will be fired on \"REGISTER\" actions\nfunction* registerUser(action) {\n  try {\n    // clear any existing error on the registration page\n    yield put({ type: 'CLEAR_REGISTRATION_ERROR' });\n\n    // passes the username and password from the payload to the server\n    yield axios.post('/api/user/register', action.payload);\n\n    // automatically log a user in after registration\n    yield put({ type: 'LOGIN', payload: action.payload });\n    \n    // set to 'login' mode so they see the login screen\n    // after registration or after they log out\n    yield put({type: 'SET_TO_LOGIN_MODE'});\n  } catch (error) {\n      console.log('Error with user registration:', error);\n      yield put({type: 'REGISTRATION_FAILED'});\n  }\n}\n\nfunction* registrationSaga() {\n  yield takeLatest('REGISTER', registerUser);\n}\n\nexport default registrationSaga;\n","import axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects';\n\n// worker Saga: will be fired on \"FETCH_USER\" actions\nfunction* fetchUser() {\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    // If a user is logged in, this will return their information\n    // from the server session (req.user)\n    const response = yield axios.get('/api/user', config);\n\n    // now that the session has given us a user object\n    // with an id and username set the client-side user object to let\n    // the client-side code know the user is logged in\n    yield put({ type: 'SET_USER', payload: response.data });\n  } catch (error) {\n    console.log('User get request failed', error);\n  }\n}\n\nfunction* userSaga() {\n  yield takeLatest('FETCH_USER', fetchUser);\n}\n\nexport default userSaga;\n","import { all } from 'redux-saga/effects';\n\nimport createSaga from './createSaga';\nimport deleteSaga from \"./deleteSaga\";\nimport editBasicSaga from './editBasicSaga';\nimport editContactSaga from \"./editContactSaga\";\nimport editPracticeSaga from \"./editPracticeSaga\";\nimport fetchMemberSaga from './fetchMemberSaga';\nimport fetchMemberSageAdvanced from \"./fetchMemberSageAdvanced\";\nimport fetchProfileSaga from './fetchProfileSaga';\nimport loginSaga from './loginSaga';\nimport registrationSaga from './registrationSaga';\nimport userSaga from \"./userSaga\";\n\n// rootSaga is the primary saga.\n// It bundles up all of the other sagas so our project can use them.\n// This is imported in index.js as rootSaga\n\n// some sagas trigger other sagas, as an example\n// the registration triggers a login\n// and login triggers setting the user\nexport default function* rootSaga() {\n  yield all([\n    createSaga(),\n    deleteSaga(),\n    editBasicSaga(),\n    editContactSaga(),\n    editPracticeSaga(),\n    fetchMemberSaga(),\n    fetchMemberSageAdvanced(),\n    fetchProfileSaga(),\n    loginSaga(),\n    registrationSaga(),\n    userSaga(),\n  ]);\n}\n","//This component imported into NavBootstrap\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router';\n\nimport NavDropdown from \"react-bootstrap/NavDropdown\";\n\n\nclass LogOutButton extends Component{\n  handleClick = () => {\n    this.props.dispatch({ type: 'LOGOUT' });\n    this.props.history.push('/home')\n  }\n\n  render() {\n    return (\n        <NavDropdown.Item onClick={() => this.handleClick()}>Logout</NavDropdown.Item>\n    );\n  } \n}\n\nexport default withRouter(connect()(LogOutButton));\n","// React Imports\nimport React, { Component } from 'react';\nimport { withRouter } from 'react-router';\n\n// Redux\nimport { connect } from 'react-redux';\n\n// Components\nimport LogOutButton from '../LogOutButton/LogOutButton';\n\n// Styling\nimport \"./NavBootstrap.css\";\n\n// React-Bootstrap\nimport Navbar from \"react-bootstrap/Navbar\";\nimport NavDropdown from \"react-bootstrap/NavDropdown\";\nimport Nav from 'react-bootstrap/Nav'\n\nclass NavBar extends Component{\n\n  handleClick = () => {\n    this.props.dispatch({ type: \"PROFILE_RESET\" });\n    this.props.history.push(`/edit-profile`);\n  }\n\n  render(){\n    return(\n    <>\n      <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <NavDropdown title=\"Menu\" id=\"collasible-nav-dropdown\">\n\n              {/* Show the link to the SearchBar at /home whether or not user is logged in */}\n              <NavDropdown.Item href=\"#home\">Search Directory</NavDropdown.Item>                \n                \n                {/* If user is logged in, show the link to the My Profile page, Contact page, and the Logout button */}\n                {/* If user is logged out, show the link to the Contact page and Login. */}\n                {this.props.user.id ?  \n                  <>\n                    <NavDropdown.Item onClick={this.handleClick}>My Profile</NavDropdown.Item>\n                    <NavDropdown.Item href=\"#contact\">Contact Us</NavDropdown.Item>\n                    <NavDropdown.Divider />\n                    <LogOutButton/>\n                  </>\n                :\n                  <>\n                    <NavDropdown.Item href=\"#contact\">Contact Us</NavDropdown.Item>\n                    <NavDropdown.Divider />\n                    <NavDropdown.Item href=\"#login\">Login</NavDropdown.Item>\n                  </>\n              }\n\n            </NavDropdown>\n            <Navbar.Brand href=\"#home\">The Hawaiian Islands Marriage and Family Therapy Directory</Navbar.Brand>\n          </Nav>\n\n          {/* If the user is NOT logged show the Login and Register links; otherwise, show nothing.*/}\n          <Nav>\n            {!this.props.user.id &&\n            <>\n            <Nav.Link href=\"#login\">Login</Nav.Link>\n            <Nav.Link eventKey={2} href=\"#register\">\n              Register\n            </Nav.Link>\n            </>\n          }\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n      </>\n    );\n  }\n}\n\n\n\nconst mapStateToProps = state => ({\n  user: state.user,\n});\n\nexport default withRouter(connect(mapStateToProps)(NavBar));\n","import React from 'react';\nimport './Footer.css'\n\n// This is one of our simplest components\n// It doesn't have local state, so it can be a function component.\n// It doesn't dispatch any redux actions or display any part of redux state\n// or even care what the redux state is, so it doesn't need 'connect()'\n\nconst Footer = () => (\n  <footer>\n    &copy; Prime Digital Academy\n  </footer>\n);\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport Button from \"react-bootstrap/Button\";\n\nclass LoginPage extends Component {\n  state = {\n    username: '',\n    password: '',\n  };\n\n  login = (event) => {\n    event.preventDefault();\n\n    if (this.state.username && this.state.password) {\n      this.props.dispatch({\n        type: 'LOGIN',\n        payload: {\n          username: this.state.username,\n          password: this.state.password,\n        },\n      });\n    } else {\n      this.props.dispatch({ type: 'LOGIN_INPUT_ERROR' });\n    }\n    this.props.history.push(`/home`);\n  } // end login\n\n  handleInputChangeFor = propertyName => (event) => {\n    this.setState({\n      [propertyName]: event.target.value,\n    });\n  }//end handleInputChangeFor\n\n  render() {\n    return (\n      <div>\n        {this.props.errors.loginMessage && (\n          <h2 className=\"alert\" role=\"alert\">\n            {this.props.errors.loginMessage}\n          </h2>\n        )}\n        <form onSubmit={this.login} className=\"form\">\n          <h1>Login</h1>\n          <div>\n            <label htmlFor=\"username\">\n              Username:\n              <input\n                type=\"text\"\n                name=\"username\"\n                className=\"input\"\n                value={this.state.username}\n                onChange={this.handleInputChangeFor(\"username\")}\n              />\n            </label>\n          </div>\n          <div>\n            <label htmlFor=\"password\">\n              Password:\n              <input\n                type=\"password\"\n                name=\"password\"\n                className=\"input\"\n                value={this.state.password}\n                onChange={this.handleInputChangeFor(\"password\")}\n              />\n            </label>\n          </div>\n          <div>\n            <Button\n              className=\"log-in input\"\n              type=\"submit\"\n              name=\"submit\"\n              value=\"Log In\"\n            >\n              Log In\n            </Button>\n          </div>\n        </form>\n        <center></center>\n      </div>\n    );\n  }\n}\n\n// Instead of taking everything from state, we just want the error messages.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({errors}) => ({ errors });\nconst mapStateToProps = state => ({\n  errors: state.errors,\n});\n\nexport default connect(mapStateToProps)(LoginPage);\n","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\n\nclass RegisterPage extends Component {\n  state = {\n    username: '',\n    password: '',\n  };\n\n  registerUser = (event) => {\n    event.preventDefault();\n\n    if (this.state.username && this.state.password) {\n      this.props.dispatch({\n        type: 'REGISTER',\n        payload: {\n          username: this.state.username,\n          password: this.state.password,\n        },\n      });\n    } else {\n      this.props.dispatch({type: 'REGISTRATION_INPUT_ERROR'});\n    }\n    this.props.history.push('/create-profile')\n  } // end registerUser\n\n  handleInputChangeFor = propertyName => (event) => {\n    this.setState({\n      [propertyName]: event.target.value,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        {this.props.errors.registrationMessage && (\n          <h2 className=\"alert\" role=\"alert\">\n            {this.props.errors.registrationMessage}\n          </h2>\n        )}\n        <form onSubmit={this.registerUser} className=\"form\">\n          <h1>Register User</h1>\n          <div>\n            <label htmlFor=\"username\">\n              Username:\n              <input\n                type=\"text\"\n                name=\"username\"\n                value={this.state.username}\n                className=\"input\"\n                onChange={this.handleInputChangeFor(\"username\")}\n              />\n            </label>\n          </div>\n          <div>\n            <label htmlFor=\"password\">\n              Password:\n              <input\n                type=\"password\"\n                name=\"password\"\n                className=\"input\"\n                value={this.state.password}\n                onChange={this.handleInputChangeFor(\"password\")}\n              />\n            </label>\n          </div>\n          <div>\n            <input\n              className=\"register\"\n              type=\"submit\"\n              name=\"submit\"\n              value=\"Register\"\n              className=\"input\"\n            />\n          </div>\n        </form>\n        <center>\n        </center>\n      </div>\n    );\n  }\n}\n\n// Instead of taking everything from state, we just want the error messages.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({errors}) => ({ errors });\nconst mapStateToProps = state => ({\n  errors: state.errors,\n});\n\nexport default connect(mapStateToProps)(RegisterPage);\n\n","import React from 'react';\nimport {Route} from 'react-router-dom'\nimport {connect} from 'react-redux';\nimport LoginPage from '../LoginPage/LoginPage';\nimport RegisterPage from '../RegisterPage/RegisterPage';\n\n// A Custom Wrapper Component -- This will keep our code DRY.\n// Responsible for watching redux state, and returning an appropriate component\n// API for this component is the same as a regular route\n\n// THIS IS NOT SECURITY! That must be done on the server\n// A malicious user could change the code and see any view\n// so your server-side route must implement real security\n// by checking req.isAuthenticated for authentication\n// and by checking req.user for authorization\n\nconst ProtectedRoute = (props) => {\n  // Using destructuring, this takes ComponentToProtect from component\n  // prop and grabs all other props to pass them along to Route\n  const {\n    // Alias prop 'component' as 'ComponentToProtect'\n    component: ComponentToProtect,\n    user,\n    loginMode,\n    ...otherProps\n  } = props;\n\n  let ComponentToShow;\n\n  if(user.id) {\n    // if the user is logged in (only logged in users have ids)\n    // show the component that is protected\n    ComponentToShow = ComponentToProtect;\n  } else if (loginMode === 'login') {\n    // if they are not logged in, check the loginMode on Redux State\n    // if the mode is 'login', show the LoginPage\n    ComponentToShow = LoginPage;\n  } else {\n    // the the user is not logged in and the mode is not 'login'\n    // show the RegisterPage\n    ComponentToShow = RegisterPage;\n  }\n\n  // We return a Route component that gets added to our list of routes\n  return (\n      <Route\n        // all props like 'exact' and 'path' that were passed in\n        // are now passed along to the 'Route' Component\n        {...otherProps}\n        component={ComponentToShow}\n      />\n  )\n}\n\n// Instead of taking everything from state, we just want the user and loginMode\n// to determine which page we should show the user\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({ user, loginMode }) => ({ user, loginMode });\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user,\n    loginMode: state.loginMode,\n  }\n}\n\nexport default connect(mapStateToProps)(ProtectedRoute)\n\n\n","import React from 'react';\nimport {Route} from 'react-router-dom'\nimport {connect} from 'react-redux';\nimport LoginPage from '../LoginPage/LoginPage';\nimport RegisterPage from '../RegisterPage/RegisterPage';\n\n// A Custom Wrapper Component -- This will keep our code DRY.\n// Responsible for watching redux state, and returning an appropriate component\n// API for this component is the same as a regular route\n\n// THIS IS NOT SECURITY! That must be done on the server\n// A malicious user could change the code and see any view\n// so your server-side route must implement real security\n// by checking req.isAuthenticated for authentication\n// and by checking req.user for authorization\n\nconst ProtectedRoute = (props) => {\n  // Using destructuring, this takes ComponentToProtect from component\n  // prop and grabs all other props to pass them along to Route\n  const {\n    // Alias prop 'component' as 'ComponentToProtect'\n    component: ComponentToProtect,\n    user,\n    loginMode,\n    ...otherProps\n  } = props;\n\n  let ComponentToShow;\n\n  if(user.admin) {\n    // if the user is logged in and is an admin \n    // (if not logged in this will be undefined, if not an admin it will be false,\n    // both result in failing this if statement)\n    // show the component that is protected\n    ComponentToShow = ComponentToProtect;\n  } else if (loginMode === 'login') {\n    // if they are not logged in, check the loginMode on Redux State\n    // if the mode is 'login', show the LoginPage\n    ComponentToShow = LoginPage;\n  } else {\n    // the the user is not logged in and the mode is not 'login'\n    // show the RegisterPage\n    ComponentToShow = RegisterPage;\n  }\n\n  // We return a Route component that gets added to our list of routes\n  return (\n      <Route\n        // all props like 'exact' and 'path' that were passed in\n        // are now passed along to the 'Route' Component\n        {...otherProps}\n        component={ComponentToShow}\n      />\n  )\n}\n\n// Instead of taking everything from state, we just want the user and loginMode\n// to determine which page we should show the user\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({ user, loginMode }) => ({ user, loginMode });\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user,\n    loginMode: state.loginMode,\n  }\n}\n\nexport default connect(mapStateToProps)(ProtectedRoute)\n\n\n","import React from 'react';\n\n//import CSS file\nimport \"./ContactPage.css\";\nimport \"../App/App.css\";\n\n// This is one of our simplest components\n// It doesn't have local state, so it can be a function component.\n// It doesn't dispatch any redux actions or display any part of redux state\n// or even care what the redux state is, so it doesn't need 'connect()'\n\n\nconst AboutPage = () => (\n  <div className=\"body\">\n    <div>\n      <h1>Get in touch!</h1>\n      <h2>Contact HIAMFT Today</h2>\n      <h3>\n        We generally respond to emails by the next day. We look forward to\n        hearing from you.\n      </h3>\n    </div>\n\n    <div className=\"body2\">\n      <div>\n        <h6>Address</h6>\n        <p>Po Box 698 Honolulu, HI 96709</p>\n      </div>\n      <div>\n        <h6>Let's Have A Talk</h6>\n        <p>Call: (808) 291-5321</p>\n        <p>Email: hawaiianislandsmfts@gmail.com</p>\n      </div>\n      <div>\n        <h6>Working Hours</h6>\n        <p>Mon – Fri: 9:00 AM – 4:00 PM Sat-Sun: Closed</p>\n      </div>\n    </div>\n  </div>\n);\n\nexport default AboutPage;\n","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport { withRouter } from 'react-router';\n\n\n//React Botstrap imports\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\n\n//CSS file imports\nimport \"./ProfileEdit.css\";\nimport \"../App/App.css\";\n\n\n\nclass ProfileEdit extends Component {\n  //setting state, particularly for conditional render of Basic, Contact & Practice sections\n  state = {\n    id: 0,\n    clickBasic: false,\n    clickContact: false,\n    clickPractice: false,\n    languages: [],\n    languagesEdit: [],\n    treatmentApproaches: [],\n  };\n\n  //mounting component - dispatching to redux sagas to call data from server for retreival from profile,\n  //languages, islands & treatments reducers (props).\n  componentDidMount() {\n    this.props.dispatch({ type: \"FETCH_LANGUAGES\" });\n    this.props.dispatch({ type: \"FETCH_ISLANDS\" });\n    this.props.dispatch({ type: \"FETCH_TREATMENTS\" });\n\n    this.props.dispatch({\n      type: \"FETCH_PROFILE\",\n      payload: { id: this.props.match.params.id || this.props.user.id },\n    });\n  } //end componentDidMount\n\n  //updating component to ensure all the data makes it to props for render\n  componentDidUpdate(previousProps) {\n    if (\n      this.state.id !== this.props.user.id &&\n      previousProps.profile.id !== this.props.profile.id &&\n      this.props.profile.phone\n    ) {\n      //declaring new variables for state with return from syncDataEditLanguage & syncDataEditIsland\n      //these functions retrieve an id based on the title of each item (ex. island title & island id)\n      //the last line of this code block is commented out to demonstrate the next steps for finishing\n      //the Practice Info section, which is currently not functional.\n      const updatedLanguages = this.syncDataEditLanguage(\n        \"languages\",\n        \"languages\"\n      );\n      const updatedIsland = this.syncDataEditIsland(\"islands\", \"island\");\n      const islandEdit = updatedIsland[0];\n      // const updatedTreatments = this.syncDataEditTreatments(\"treatmentApproaches\", \"treatmentApproaches\");\n\n      //setting state in component update with all of the properties retrieved from props from the database\n      //for this particular member's profile view.\n      //as above, treatmentApproaches has been commented out\n      this.setState({\n        id: this.props.profile.id,\n        prefix: this.props.profile.prefix,\n        firstName: this.props.profile.first_name,\n        lastName: this.props.profile.last_name,\n        title: this.props.profile.title,\n        age: this.props.profile.age,\n        phone: this.props.profile.phone[0],\n        address: this.props.profile.address,\n        city: this.props.profile.city,\n        island: this.props.profile.island,\n        islandEdit: islandEdit[0].island_id,\n        email: this.props.profile.email,\n        zipCode: this.props.profile.zip_code,\n        website: this.props.profile.website,\n        credentials: this.props.profile.credentials,\n        licenseState: this.props.profile.license_state,\n        licenseExpiration: this.props.profile.license_expiration,\n        licenseNumber: this.props.profile.license_number,\n        licenseType: this.props.profile.license_type,\n        hiamftMemberInfo: this.props.profile.hiamft_member_account_info,\n        supervisionStatus: this.props.profile.supervision_status,\n        fees: this.props.profile.fees,\n        telehealth: this.props.profile.telehealth,\n        statement: this.props.profile.statement,\n        languages: this.props.profile.languages,\n        languagesEdit: updatedLanguages,\n        treatmentApproaches: this.props.treatmentPreferences,\n        // treatmentAproachesEdit: updatedTreatments,\n        agesServed: this.props.profile.ages_served,\n        clientFocus: this.props.profile.client_focus,\n        insurance: this.props.profile.insurance,\n        sessionFormat: this.props.profile.session_format,\n        specialty: this.props.profile.speciaty,\n        treatmentPreferences: this.props.profile.treatment_preferences,\n      });\n    }\n  } //end componentDidUpdate\n\n  //the syncDataEdit functions are called in componentDidUpdate to get IDs on values to be edited.\n  //the reducerName is the reducer that holds the array of objects with ids & values (all of the options from the DB)\n  //the profileName is the property in the profile that holds just the values for this specific user\n  //reducerName & profileName as arguments were written in the general sense originally to try to make this a\n  //generic function. Due to the way the database is set up, we found it easier in this instance to write a new\n  //function for each reducer & corresponding property to retrieve IDs for property titles.\n  //with some changes to the database, the following functions could become one generic function to be called to sync data.\n  syncDataEditLanguage = (reducerName, profileName) => {\n    //this conditional rendering is mitigating an async issue\n    if (this.props.profile[reducerName] && this.props.profile[profileName]) {\n      //mapping over user's languages from profile reducer (props) and using filter method to return\n      //the language object (language.id & language.title) from the languages reducer (all possibilities)\n      //where the language.id is the same as the value of langauges in profile reducer\n      //this allows us to get the name of the language ('Arabic') off the id ('2') retrieved from the user's profile.\n      const updatedLanguages = this.props.profile[profileName].map((lang) => {\n        const results = this.props[reducerName].filter(\n          (object) => object.title === lang\n        );\n        return results[0].language_id;\n      });\n      return updatedLanguages;\n    }\n  }; //end syncDataEditLanguage\n\n  //see comments above\n  syncDataEditIsland = (reducerName, profileName) => {\n    if (this.props[reducerName] && this.props.profile[profileName]) {\n      const updatedIsland = this.props.profile[profileName].map((island) => {\n        const results = this.props[reducerName].filter(\n          (object) => object.title === island\n        );\n        return results;\n      });\n      return updatedIsland;\n    }\n  }; //end syncDataEditIsland\n\n  //see comments above - this is commented code to render Treatments\n  // syncDataEditTreatments = (reducerName, profileName) => {\n  //   const updatedIsland = this.props.profile[profileName].map((treatment) => {\n  //     const results = this.props[reducerName].filter(\n  //      (object) => object.title === treatment)\n  //     return results[0].treatment_id\n  //   })\n  //   return updatedTreatments;\n  // }//end syncDataEditTreatments\n\n  //this function handles the conditional rendering to switch between View and Edit modes\n  handleEditBasic = () => {\n    //setting state to indicate the Edit Basic Info button has been clicked\n    this.setState({\n      clickBasic: true,\n    });\n  }; //end handleEditBasic\n\n  //this function saves the new information entered into the Basic Info form\n  handleSaveBasic = () => {\n    //resetting state to indicate the Save Changes button has been clicked\n    this.setState({\n      clickBasic: false,\n    });\n    //dispatching to EditBasic saga, sending updated state as payload\n    this.props.dispatch({\n      type: \"EDIT_BASIC\",\n      payload: this.state,\n    });\n  }; //end handleSaveBasic\n\n  //this function handles the conditional rendering to switch between View and Edit modes\n  handleEditContact = () => {\n    //setting state to indicate the Edit Basic Info button has been clicked\n    this.setState({\n      clickContact: true,\n    });\n  }; //end handleEditContact\n\n  //this function saves the new information entered into the Contact Info form\n  handleSaveContact = () => {\n    //resetting state to indicate the Save Changes button has been clicked\n    this.setState({\n      clickContact: false,\n    });\n    //dispatching to EditContact saga, sending updated state as payload\n    this.props.dispatch({\n      type: \"EDIT_CONTACT\",\n      payload: this.state,\n    });\n  }; //end handleSaveContact\n\n  //this function handles the conditional rendering to switch between View and Edit modes\n  handleEditPractice = () => {\n    //setting state to indicate the Edit Basic Info button has been clicked\n    this.setState({\n      clickPractice: true,\n    });\n  }; //end handleEditPractice\n\n  //this function saves the new information entered into the Practice Info form\n  handleSavePractice = () => {\n    //resetting state to indicate the Save Changes button has been clicked\n    this.setState({\n      clickPractice: false,\n    });\n    //dispatching to EditPractice saga, sending updated state as payload\n    this.props.dispatch({\n      type: \"EDIT_PRACTICE\",\n      payload: this.state,\n    });\n  }; //end handleSavePractice\n\n  //handleChange resets state according to new data entered into form inputs\n  handleChange = (event, propertyName) => {\n    this.setState({\n      [propertyName]: event.target.value,\n    });\n  }; //end handleChange\n\n  //every multiselect needs its own handle[Property]Change function\n  //this functions take the new id of an item selected in the multiselect\n  //and converts it to a title (name).\n  //i.e. select language \"Arabic\" which has a value of '2', and returns the name of language \"Arabic\"\n  handleLangChange = (event, editPropertyName, viewPropertyName) => {\n    const array = [];\n    for (let option of event.target.selectedOptions) {\n      array.push(Number(option.value));\n    }\n    const updatedLanguages = array.map((id) => {\n      const results = this.props.languages.filter(\n        (object) => object.language_id === id\n      );\n      return results[0].title;\n    });\n    this.setState({\n      [editPropertyName]: array,\n      [viewPropertyName]: updatedLanguages,\n    });\n  }; //end handleLangChange\n\n  //see comments directly above\n  handleIslandChange = (event, editPropertyName, viewPropertyName) => {\n    const array = [];\n    for (let option of event.target.selectedOptions) {\n      array.push(Number(option.value));\n    }\n    const updatedIsland = array.map((id) => {\n      const results = this.props.islands.filter(\n        (object) => object.island_id === id\n      );\n      return results[0].title;\n    });\n    this.setState({\n      [editPropertyName]: array,\n      [viewPropertyName]: updatedIsland,\n    });\n  };\n\n  displayLanguages = () => {\n    if (this.state.clickBasic) {\n      return (\n        <Form.Group>\n          <Form.Label className=\"label\">Languages Spoken</Form.Label>\n          <Form.Control\n            as=\"select\"\n            multiple=\"true\"\n            value={this.state.languagesEdit}\n            onChange={(event) =>\n              this.handleLangChange(event, \"languagesEdit\", \"languages\")\n            }\n          >\n            {this.props.languages.map((lang) => {\n              return (\n                <>\n                  <option key={lang.language_id} value={lang.language_id}>\n                    {lang.title}\n                  </option>\n                </>\n              );\n            })}\n          </Form.Control>\n        </Form.Group>\n      );\n    } else {\n      return (\n        <Form.Group>\n          <Form.Label className=\"label\">Languages Spoken</Form.Label>\n          <div>\n            {this.state.languages.map((lang) => {\n              return (\n                <>\n                  <Form.Control disabled=\"true\" readOnly defaultValue={lang} />\n                </>\n              );\n            })}\n          </div>\n        </Form.Group>\n      );\n    }\n  };\n\n  displayIslands = () => {\n    if (this.state.clickContact) {\n      return (\n        <Form.Group>\n          <Form.Label variant=\"flat\" className=\"label\">\n            Island\n          </Form.Label>\n          <Form.Control\n            as=\"select\"\n            value={this.state.islandEdit}\n            onChange={(event) =>\n              this.handleIslandChange(event, \"islandEdit\", \"island\")\n            }\n          >\n            {this.props.islands.map((island) => {\n              return (\n                <>\n                  <option key={island.island_id} value={island.island_id}>\n                    {island.title}\n                  </option>\n                </>\n              );\n            })}\n          </Form.Control>\n        </Form.Group>\n      );\n    } else {\n      return (\n        <Form.Group>\n          <Form.Label variant=\"flat\" className=\"label\">\n            Island\n          </Form.Label>\n          {this.state.island && (\n            <Form.Control\n              disabled=\"true\"\n              readOnly\n              defaultValue={this.state.island}\n            />\n          )}\n        </Form.Group>\n      );\n    }\n  };\n\n  render() {\n    if (this.props.profile && this.state.languages) {\n      return (\n        <>\n          <div className=\"header\">\n            <h3>My Profile</h3>\n            {/* {JSON.stringify(this.props.profile)} */}\n            {/* <br></br>\n          <br/> */}\n            {/* {JSON.stringify(this.state)} */}\n            {/* \n          <br/>\n          <br/> */}\n            {/* {JSON.stringify(this.props.treatments)} */}\n          </div>\n          {/**Here is Basic Info render */}\n          {this.state.clickBasic ? (\n            <div className=\"body\">\n              <div className=\"flex-between row-wrap\">\n                <h4>Basic Info</h4>\n                <Button\n                  className=\"flex-between row-wrap\"\n                  onClick={() => this.handleSaveBasic()}\n                >\n                  Save Changes\n                </Button>\n              </div>\n              <div className=\"border\">\n                <Form className=\"flex-between row-wrap\">\n                  <Form.Group>\n                    <Form.Label variant=\"flat\" className=\"label\">\n                      Prefix\n                    </Form.Label>\n                    <Form.Control\n                      defaultValue={this.props.profile.prefix}\n                      onChange={(event) => this.handleChange(event, \"prefix\")}\n                    />\n                  </Form.Group>\n\n                  <Form.Group>\n                    <Form.Label className=\"label\">First Name</Form.Label>\n                    <Form.Control\n                      defaultValue={this.props.profile.first_name}\n                      onChange={(event) =>\n                        this.handleChange(event, \"firstName\")\n                      }\n                    />\n                  </Form.Group>\n\n                  <Form.Group>\n                    <Form.Label className=\"label\">Last Name</Form.Label>\n                    <Form.Control\n                      defaultValue={this.props.profile.last_name}\n                      onChange={(event) => this.handleChange(event, \"lastName\")}\n                    />\n                  </Form.Group>\n\n                  <Form.Group>\n                    <Form.Label className=\"label\">Age</Form.Label>\n                    <Form.Control\n                      type=\"number\"\n                      defaultValue={this.props.profile.age}\n                      onChange={(event) => this.handleChange(event, \"age\")}\n                    />\n                    <Form.Text className=\"text-muted\">\n                      Not Listed - HIAMFT-Use Only\n                    </Form.Text>\n                  </Form.Group>\n                  {this.displayLanguages()}\n                </Form>\n                <Form>\n                  <Form.Group>\n                    <Form.Label className=\"label\">About You</Form.Label>\n                    <Form.Control\n                      as=\"textarea\"\n                      rows=\"5\"\n                      defaultValue={this.props.profile.statement}\n                      onChange={(event) =>\n                        this.handleChange(event, \"statement\")\n                      }\n                    />\n                  </Form.Group>\n                </Form>\n              </div>\n            </div>\n          ) : (\n            <div className=\"body\">\n              <div className=\"flex-between row-wrap\">\n                <h4>Basic Info</h4>\n                <Button\n                  className=\"flex-between row-wrap\"\n                  onClick={() => this.handleEditBasic()}\n                >\n                  Edit Basic Info\n                </Button>\n              </div>\n              {this.props.profile && (\n                <>\n                  <div className=\"border\">\n                    <Form className=\"flex-between row-wrap\">\n                      <Form.Group>\n                        <Form.Label className=\"label\">Prefix</Form.Label>\n                        <Form.Control\n                          disabled=\"true\"\n                          readOnly\n                          defaultValue={this.props.profile.prefix}\n                        />\n                      </Form.Group>\n                      <Form.Group>\n                        <Form.Label className=\"label\">First Name</Form.Label>\n                        <Form.Control\n                          disabled=\"true\"\n                          readOnly\n                          defaultValue={this.props.profile.first_name}\n                        />\n                      </Form.Group>\n                      <Form.Group>\n                        <Form.Label className=\"label\">Last Name</Form.Label>\n                        <Form.Control\n                          disabled=\"true\"\n                          readOnly\n                          defaultValue={this.props.profile.last_name}\n                        />\n                      </Form.Group>\n                      <Form.Group>\n                        <Form.Label className=\"label\">Age</Form.Label>\n                        <Form.Control\n                          disabled=\"true\"\n                          readOnly\n                          defaultValue={this.props.profile.age}\n                        />\n                        <Form.Text className=\"text-muted\">\n                          Not Listed - HIAMFT-Use Only\n                        </Form.Text>\n                      </Form.Group>\n                      {this.displayLanguages()}\n                    </Form>\n                    <Form className=\"last\">\n                      <Form.Group>\n                        <Form.Label className=\"label\">About You</Form.Label>\n                        <Form.Control\n                          as=\"textarea\"\n                          rows=\"5\"\n                          disabled=\"true\"\n                          readOnly\n                          defaultValue={this.props.profile.statement}\n                        />\n                      </Form.Group>\n                    </Form>\n                  </div>\n                </>\n              )}\n            </div>\n          )}\n\n          {/**Here is Contact Info render */}\n\n          {this.state.clickContact && this.props.profile ? (\n            <div className=\"body\">\n              <div className=\"flex-between row-wrap first\">\n                <h4>Contact Info</h4>\n                <Button\n                  className=\"flex-between row-wrap\"\n                  onClick={() => this.handleSaveContact()}\n                >\n                  Save Changes\n                </Button>\n              </div>\n              <div className=\"border\">\n                <Form>\n                  <Form.Group>\n                    <Form.Label className=\"label\">Phone Number</Form.Label>\n                    <Form.Control\n                      defaultValue={this.state.phone}\n                      onChange={(event) => this.handleChange(event, \"phone\")}\n                    />\n                    <Form.Text className=\"text-muted\">\n                      Business - Listed\n                    </Form.Text>\n                  </Form.Group>\n\n                  <Form.Group>\n                    <Form.Label className=\"label\">Email Address</Form.Label>\n                    <Form.Control\n                      defaultValue={this.props.profile.email}\n                      onChange={(event) => this.handleChange(event, \"email\")}\n                    />\n                    <Form.Text className=\"text-muted\">\n                      Business - Listed\n                    </Form.Text>\n                  </Form.Group>\n\n                  <Form.Group>\n                    <Form.Label className=\"label\">Website</Form.Label>\n                    <Form.Control\n                      defaultValue={this.props.profile.website}\n                      onChange={(event) => this.handleChange(event, \"website\")}\n                    />\n                  </Form.Group>\n                </Form>\n                <Form>\n                  {this.displayIslands()}\n                  <Form.Group>\n                    <Form.Label variant=\"flat\" className=\"label\">\n                      City\n                    </Form.Label>\n                    <Form.Control\n                      defaultValue={this.props.profile.city}\n                      onChange={(event) => this.handleChange(event, \"city\")}\n                    />\n                  </Form.Group>\n                  <Form.Group>\n                    <Form.Label variant=\"flat\" className=\"label\">\n                      Zip Code\n                    </Form.Label>\n                    <Form.Control\n                      defaultValue={this.props.profile.zip_code}\n                      onChange={(event) => this.handleChange(event, \"zipCode\")}\n                    />\n                  </Form.Group>\n\n                  <Form.Group>\n                    <Form.Label className=\"label\">Address</Form.Label>\n                    <Form.Control\n                      defaultValue={this.props.profile.address}\n                      onChange={(event) => this.handleChange(event, \"address\")}\n                    />\n                    <Form.Text className=\"text-muted\">\n                      Business - Listed\n                    </Form.Text>\n                  </Form.Group>\n                </Form>\n              </div>\n            </div>\n          ) : (\n            <div className=\"body\">\n              <div className=\"flex-between row-wrap first\">\n                <h4>Contact Info</h4>\n                <Button\n                  className=\"flex-between row-wrap first\"\n                  onClick={() => this.handleEditContact()}\n                >\n                  Edit Contact Info\n                </Button>\n              </div>\n              {this.props.profile && (\n                <>\n                  <div className=\"border\">\n                    <Form>\n                      <Form.Group>\n                        <Form.Label className=\"label\">Phone Number</Form.Label>\n                        <Form.Control\n                          disabled=\"true\"\n                          readOnly\n                          defaultValue={this.state.phone}\n                        />\n                        <Form.Text className=\"text-muted\">\n                          Business - Listed\n                        </Form.Text>\n                      </Form.Group>\n\n                      <Form.Group>\n                        <Form.Label className=\"label\">Email Address</Form.Label>\n                        <Form.Control\n                          disabled=\"true\"\n                          readOnly\n                          defaultValue={this.props.profile.email}\n                        />\n                        <Form.Text className=\"text-muted\">\n                          Business - Listed\n                        </Form.Text>\n                      </Form.Group>\n\n                      <Form.Group>\n                        <Form.Label className=\"label\">Website</Form.Label>\n                        <Form.Control\n                          disabled=\"true\"\n                          readOnly\n                          defaultValue={this.props.profile.website}\n                        />\n                      </Form.Group>\n                    </Form>\n                    <Form>\n                      {this.displayIslands()}\n                      <Form.Group>\n                        <Form.Label className=\"label\">Address</Form.Label>\n                        <Form.Control\n                          disabled=\"true\"\n                          readOnly\n                          defaultValue={this.props.profile.address}\n                        />\n                        <Form.Text className=\"text-muted\">\n                          Business - Listed\n                        </Form.Text>\n                      </Form.Group>\n                      <Form.Group>\n                        <Form.Label variant=\"flat\" className=\"label\">\n                          City\n                        </Form.Label>\n                        <Form.Control\n                          disabled=\"true\"\n                          readOnly\n                          defaultValue={this.props.profile.city}\n                        />\n                      </Form.Group>\n                      <Form.Group>\n                        <Form.Label variant=\"flat\" className=\"label\">\n                          Zip Code\n                        </Form.Label>\n                        <Form.Control\n                          disabled=\"true\"\n                          readOnly\n                          defaultValue={this.props.profile.zip_code}\n                        />\n                      </Form.Group>\n                    </Form>\n                  </div>\n                </>\n              )}\n            </div>\n          )}\n\n          {/**Here is Practice Info render */}\n          {this.state.clickPractice ? (\n            <div className=\"body\">\n              <div className=\"flex-between row-wrap first\">\n                <h4>Practice Info</h4>\n                <Button\n                  className=\"flex-between row-wrap\"\n                  onClick={() => this.handleSavePractice()}\n                >\n                  Save Changes\n                </Button>\n              </div>\n              <div className=\"border\">\n                <Form className=\"flex-between row-wrap\">\n                  <Form.Group>\n                    <Form.Label className=\"label\">Title</Form.Label>\n                    <Form.Control\n                      defaultValue={this.props.profile.title}\n                      onChange={(event) => this.handleChange(event, \"title\")}\n                    />\n                  </Form.Group>\n                  <Form.Group>\n                    <Form.Label className=\"label\">Credentials</Form.Label>\n                    <Form.Control\n                      defaultValue={this.props.profile.credentials}\n                      onChange={(event) =>\n                        this.handleChange(event, \"credentials\")\n                      }\n                    />\n                  </Form.Group>\n                  <Form.Group>\n                    <Form.Label className=\"label\">\n                      Supervision Status\n                    </Form.Label>\n                    <Form.Control\n                      defaultValue={this.props.profile.supervisionStatus}\n                      onChange={(event) =>\n                        this.handleChange(event, \"supervisionStatus\")\n                      }\n                    />\n                  </Form.Group>\n                  <Form.Group>\n                    <Form.Label className=\"label\">Telehealth</Form.Label>\n                    <Form.Control\n                      defaultValue={this.props.profile.telehealth}\n                      onChange={(event) =>\n                        this.handleChange(event, \"telehealth\")\n                      }\n                    />\n                  </Form.Group>\n                </Form>\n                <Form className=\"flex-between row-wrap\">\n                  <Form.Group>\n                    <Form.Label className=\"label\">License Number</Form.Label>\n                    <Form.Control\n                      defaultValue={this.props.profile.licenseNumber}\n                      onChange={(event) =>\n                        this.handleChange(event, \"licenseNumber\")\n                      }\n                    />\n                  </Form.Group>\n                  <Form.Group>\n                    <Form.Label className=\"label\">\n                      License Expiration Date\n                    </Form.Label>\n                    <Form.Control\n                      defaultValue={this.props.profile.licenseExpiration}\n                      onChange={(event) =>\n                        this.handleChange(event, \"licenseExpiration\")\n                      }\n                    />\n                  </Form.Group>\n                  <Form.Group>\n                    <Form.Label className=\"label\">License Type</Form.Label>\n                    <Form.Control\n                      defaultValue={this.props.profile.licenseType}\n                      onChange={(event) =>\n                        this.handleChange(event, \"licenseType\")\n                      }\n                    />\n                  </Form.Group>\n                  <Form.Group>\n                    <Form.Label className=\"label\">Fees</Form.Label>\n                    <Form.Control\n                      defaultValue={this.props.profile.fees}\n                      onChange={(event) => this.handleChange(event, \"fees\")}\n                    />\n                  </Form.Group>\n                </Form>\n                <Form>\n                  <Form.Group>\n                    <Form.Label variant=\"flat\" className=\"label\">\n                      Treatment & Approaches\n                    </Form.Label>\n                    <Form.Control\n                      defaultValue={this.props.profile.treatmentPreferences}\n                      onChange={(event) =>\n                        this.handleChange(event, \"treatmentPreferences\")\n                      }\n                    />\n                  </Form.Group>\n                  <Form.Group>\n                    <Form.Label variant=\"flat\" className=\"label\">\n                      Specialties\n                    </Form.Label>\n                    <Form.Control\n                      defaultValue={this.props.profile.specialties}\n                      onChange={(event) =>\n                        this.handleChange(event, \"specialties\")\n                      }\n                    />\n                  </Form.Group>\n                  <Form.Group>\n                    <Form.Label variant=\"flat\" className=\"label\">\n                      Insurances Taken\n                    </Form.Label>\n                    <Form.Control\n                      defaultValue={this.props.profile.insurance}\n                      onChange={(event) =>\n                        this.handleChange(event, \"insurance\")\n                      }\n                    />\n                  </Form.Group>\n                  <Form.Group>\n                    <Form.Label className=\"label\">Client Focus</Form.Label>\n                    <Form.Control\n                      defaultValue={this.props.profile.clientFocus}\n                      onChange={(event) =>\n                        this.handleChange(event, \"clientFocus\")\n                      }\n                    />\n                  </Form.Group>\n\n                  <Form.Group>\n                    <Form.Label className=\"label\">Session Format</Form.Label>\n                    <Form.Control\n                      defaultValue={this.props.profile.sessionFormat}\n                      onChange={(event) =>\n                        this.handleChange(event, \"sessionFormat\")\n                      }\n                    />\n                  </Form.Group>\n                </Form>\n              </div>\n            </div>\n          ) : (\n            <div className=\"body\">\n              <div className=\"flex-between row-wrap first\">\n                <h4>Practice Info</h4>\n                <Button\n                  className=\"flex-between row-wrap\"\n                  onClick={() => this.handleEditPractice()}\n                >\n                  Edit Practice Info\n                </Button>\n              </div>\n              <div className=\"border\">\n                <Form className=\"flex-between row-wrap\">\n                  <Form.Group>\n                    <Form.Label className=\"label\">Title</Form.Label>\n                    <Form.Control\n                      disabled=\"true\"\n                      readOnly\n                      defaultValue={this.props.profile.title}\n                    />\n                  </Form.Group>\n                  <Form.Group>\n                    <Form.Label className=\"label\">Credentials</Form.Label>\n                    <Form.Control\n                      disabled=\"true\"\n                      readOnly\n                      defaultValue={this.props.profile.credentials}\n                    />\n                  </Form.Group>\n                  <Form.Group>\n                    <Form.Label className=\"label\">\n                      Supervision Status\n                    </Form.Label>\n                    <Form.Control\n                      disabled=\"true\"\n                      readOnly\n                      defaultValue={this.props.profile.supervisionStatus}\n                    />\n                  </Form.Group>\n                  <Form.Group>\n                    <Form.Label className=\"label\">Telehealth</Form.Label>\n                    <Form.Control\n                      disabled=\"true\"\n                      readOnly\n                      defaultValue={this.props.profile.telehealth}\n                    />\n                  </Form.Group>\n                </Form>\n                <Form className=\"flex-between row-wrap\">\n                  <Form.Group>\n                    <Form.Label className=\"label\">License Number</Form.Label>\n                    <Form.Control\n                      disabled=\"true\"\n                      readOnly\n                      defaultValue={this.props.profile.licenseNumber}\n                    />\n                  </Form.Group>\n                  <Form.Group>\n                    <Form.Label className=\"label\">\n                      License Expiration Date\n                    </Form.Label>\n                    <Form.Control\n                      disabled=\"true\"\n                      readOnly\n                      defaultValue={this.props.profile.licenseExpiration}\n                    />\n                  </Form.Group>\n                  <Form.Group>\n                    <Form.Label className=\"label\">License Type</Form.Label>\n                    <Form.Control\n                      disabled=\"true\"\n                      readOnly\n                      defaultValue={this.props.profile.licenseType}\n                    />\n                  </Form.Group>\n                  <Form.Group>\n                    <Form.Label className=\"label\">Fees</Form.Label>\n                    <Form.Control\n                      disabled=\"true\"\n                      readOnly\n                      defaultValue={this.props.profile.fees}\n                    />\n                  </Form.Group>\n                </Form>\n                <Form>\n                  <Form.Group>\n                    <Form.Label variant=\"flat\" className=\"label\">\n                      Treatment & Approaches\n                    </Form.Label>\n                    <Form.Control\n                      disabled=\"true\"\n                      readOnly\n                      defaultValue={this.props.profile.treatmentPreferences}\n                    />\n                  </Form.Group>\n                  <Form.Group>\n                    <Form.Label variant=\"flat\" className=\"label\">\n                      Specialties\n                    </Form.Label>\n                    <Form.Control\n                      disabled=\"true\"\n                      readOnly\n                      defaultValue={this.props.profile.specialties}\n                    />\n                  </Form.Group>\n                  <Form.Group>\n                    <Form.Label variant=\"flat\" className=\"label\">\n                      Insurances Taken\n                    </Form.Label>\n                    <Form.Control\n                      disabled=\"true\"\n                      readOnly\n                      defaultValue={this.props.profile.insurance}\n                    />\n                  </Form.Group>\n                  <Form.Group>\n                    <Form.Label className=\"label\">Client Focus</Form.Label>\n                    <Form.Control\n                      disabled=\"true\"\n                      readOnly\n                      defaultValue={this.props.profile.clientFocus}\n                    />\n                  </Form.Group>\n\n                  <Form.Group>\n                    <Form.Label className=\"label\">Session Format</Form.Label>\n                    <Form.Control\n                      disabled=\"true\"\n                      readOnly\n                      defaultValue={this.props.profile.sessionFormat}\n                    />\n                  </Form.Group>\n                </Form>\n              </div>\n            </div>\n          )}\n        </>\n      );\n    } else {\n      return <p> user not found </p>;\n    }\n  }\n}\n\nconst putReduxStateOnProps = (reduxStore) => ({\n    user: reduxStore.user,\n    profile: reduxStore.profile,\n    languages: reduxStore.languages,\n    islands: reduxStore.islands,\n    treatments: reduxStore.treatmentPreferences\n});\n\nexport default withRouter(connect(putReduxStateOnProps)(ProfileEdit));","// React imports\nimport React, { Component } from 'react';\n\n// React Boostrap\nimport Card from \"react-bootstrap/Card\";\n\n// Styling\nimport './SearchResults.css'\n\nclass SearchResults extends Component {\n    render() { \n        return (\n          <>\n            {/* \n                Muted text at the top showing the user the result count.\n                Only shows if there is anything to show.\n            */}\n            {this.props.therapists[0] && (\n              <h5 className=\"text-muted center\">\n                Your search resulted in {this.props.therapists.length} results.\n              </h5>\n            )}\n\n            {this.props.therapists.map((therapist) => (\n              // I made it a div to encapsulate the Card instead of just\n              // a Card so if needed we could add more to each result.\n              // One thing we will add in the future is the small map\n              // Showing quickly where each therapist is located.\n              // as of now however that doesnt exist so nothing shows in its place.\n\n              // search-result is already a flexbox so adding something will auto-format\n              <div className=\"flex-evenly\">\n                <Card style={{ width: \"80%\", margin: \"10px\" }} className=\"card\">\n                  <Card.Body>\n                    {/* \n                        The name and location of the therapist\n                        This information is super important so its placed\n                        at the very top of the card.\n                    */}\n                    <Card.Title>\n                      {/* \n                            flex-between is a class that simply does inables flexbox\n                            with space between.effectively this just alligns content\n                            to the sides of the Card but it could be used later for \n                            other items if we decide to show more.\n                         */}\n                      <div className=\"flex-between mobile-padding\">\n                        {/* \n                            Due to how flexbox is each set of information is in\n                            its own <div /> tag. I gave these all unique classes\n                            in case we decide to give any of them a special\n                            look, font or any other css changes.\n                        */}\n                        <div className=\"name\">\n                          {therapist.first_name} {therapist.last_name}\n                        </div>\n                        <div className=\"island\">\n                          {/*\n                            I don't know if this is how location is supposed to be\n                            displayed in terms of city and island but its what was\n                            shown in the wireframe so it is staying in the skeleton.\n                          */}\n                          {therapist.city},{' '}\n                          {therapist.island[0]}\n                        </div>\n                      </div>\n                    </Card.Title>\n                    {/*\n                        The subtitle section is less important\n                        information that we still want very visible.\n                        This information is all of the qualifications\n                        of the therapist as well as the phone number.\n\n                        The qualifications need to be visible so the \n                        person searching can easily see they are getting\n                        exactly what they are looking for and need.\n\n                        Phone number is also needed right away because\n                        its generally the easiest way to contact someone.\n                        \n                        The text was colored gray in the bootstrap example\n                        so I kept it here. I considered changing it but I feel\n                        its better to keep it gray. It's still visible but it\n                        makes it distinct as well as acting like a divider between\n                        the header and the body information.\n                    */}\n                    <Card.Subtitle className=\"mb-2 text-muted\">\n                      <div className=\"flex-between row-wrap\">\n                        <div className=\"titles\">\n                          {/* \n                            The amount of titles a therapist could have can\n                            vary wildly. Using this join method I can display\n                            them all nicely and without much effort.\n                          */}\n                          {therapist.title}, {therapist.credentials}\n                        </div>\n                        <div className=\"number\">{therapist.phone[0]}</div>\n                      </div>\n                    </Card.Subtitle>\n                    <Card.Text>\n                      <div className=\"flex-between row-wrap-reverse\">\n                        <div className=\"description\">{therapist.statement}</div>\n                        {/* Contact is aligned to the right for visual appeal */}\n                        <div className=\"contact-info\">\n                          {therapist.email[0]} <br />\n                          {/*\n                            The link here links to the page it mentions.\n                            It does so by turning itself into an https link\n                            and then opening that link in a new tab when clicked.\n\n                            I wanted it to open in a new tab so it doesn't destroy\n                            the users search results.\n                          */}\n                          <a\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                            href={`https://${therapist.website}`}\n                          >\n                            {therapist.website}\n                          </a>\n                        </div>\n                      </div>\n                    </Card.Text>\n                    <Card.Link href={`#/profile/${therapist.id}`}>\n                      View Profile\n                    </Card.Link>\n                  </Card.Body>\n                </Card>\n              </div>\n            ))}\n          </>\n        );\n    }\n}\n \nexport default SearchResults;","import React, { Component } from 'react';\n\nimport Form from \"react-bootstrap/Form\";\n\nclass SearchSelect extends Component {\n\n  render() { \n    return (\n      <Form.Group\n        controlId=\"exampleForm.ControlSelect1\"\n        className=\"advanced-input\"\n      >\n        <Form.Label>{this.props.name}</Form.Label>\n        <Form.Control\n          as=\"select\"\n          onChange={this.props.onChange || console.log(\"\")}\n          value={this.props.value}\n        >\n          {this.props.array ? (\n            <>\n              <option value={null}>Choose One</option>\n              {Object.keys(this.props.array).map((key) => (\n                // Displays the option and the amount of that option\n                // there are. Should be useful for the user.\n                <>\n                  {this.props.array[key] > 0 && (\n                    <option value={key}>\n                      {key} ({this.props.array[key]})\n                    </option>\n                  )}\n                </>\n              ))}\n            </>\n          ) : (\n            <>\n              <option value={null}>None</option>\n            </>\n          )}\n        </Form.Control>\n      </Form.Group>\n    );\n  }\n}\n \nexport default SearchSelect;","//This component is imported into render of Search Bar component\n \n// React Imports\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\n// Custom Components\nimport SearchResults from \"../SearchResults/SearchResults\";\nimport SearchSelect from '../SearchSelect/SearchSelect';\n\n\n// React Boostrap\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\n\n// CSS\nimport './SearchBar.css'\n\nconst criteria = [\n  \"specialty\",\n  \"supervision_status\",\n  \"insurance\",\n  \"treatment_preferences\",\n  \"languages\",\n  \"ages_served\",\n  \"client_focus\",\n  \"session_format\"\n];\n\nclass SearchBar extends Component {\n  state = {\n    restart: true,\n    therapists: [],\n  };\n\n  advancedSearchSubmit = (event) => {\n    // Prevents reload of the page\n    event.preventDefault()\n\n    // Sets the base query\n    let query = '';\n\n    // Sets the criteria to possibly search\n    const queryCriteria = [...criteria, 'name', 'zip', 'telehealth']\n\n    // This loops through the criteria and creates the search query based on\n    // what the values of the criteria are in the state.\n    for (let criteria of queryCriteria) {\n      // if there is a value to the criteria too it to the query\n      if (this.state[criteria]) {\n        // This adds an & at the end of the query string if one is needed\n        if (query !== '') {\n          query += '&'\n        }\n\n        // if there hit require telehealth.\n        // If it is set to false it simply just won't filter by it at all\n        // having it checked requires it but unchecked ignores the filter\n        if (criteria === 'telehealth') {\n          // telehealth is boolean so it cant have the replacing the others need.\n          query += criteria + \"=\" + this.state[criteria]\n        } else {\n          // This replaces the criteria and its value with something \n          // useable in the url query.\n          query += criteria + \"=\" + this.state[criteria].replace(\" \", \"+\");\n        }\n      }\n    }\n\n    // Dispatches to redux which then sends the query to the server\n    this.props.dispatch({\n      type: \"FETCH_MEMBERS_ADVANCED\",\n      payload: query,\n    });\n  }\n\n  onSearchChange = (event) => {\n    this.setState({\n      basic_search: event.target.value,\n    });\n  };\n\n  // Changes the specific state of the item in the adv search\n  onSearchChangeAdv = (event, type) => {\n    this.setState({\n      [type]: event.target.value,\n    });\n  };\n\n  onSearchClicked = (event) => {\n    event.preventDefault();\n    this.props.dispatch({\n      type: \"FETCH_MEMBERS\",\n      payload: this.state.basic_search,\n    });\n  };\n\n  onTelehealthChange = (event) => {\n    this.setState({\n      telehealth: event.target.checked,\n    });\n  };\n\n  parseSearchData = () => {\n    // Makes the data variable exist for later use\n    let data = {};\n\n    // This first for...of loop is looping through each\n    // therapist in the system.\n    for (const therapist of this.state.therapists) {\n      // Now that we have the therapist we need to read each of\n      // the values we said we would read. This loop loops through\n      // the criteria listed at the top of the file and files them\n      // nicely as well as increasing the count for that item.\n      for (const parse of criteria) {\n        // This line creates the key of data based on the string\n        // without this line it would crash the whole website.\n        data[parse] = data[parse] || {};\n        // It does || because it doesnt want to replace it,\n        // it only wants to make it if it doesnt already exist.\n\n        // Checks if its an array or not.\n        if (Array.isArray(therapist[parse])) {\n          // If it is an array it loops through the array and\n          // counts each one seperately.\n          for (const item of therapist[parse]) {\n            // Loops through the array and adds one to each count\n            // the || is to create the key if it doesnt already exist\n            // and start it at 1\n            data[parse][item] = data[parse][item] + 1 || 1;\n          }\n        } else {\n          // If its not an array it simply counts the string itself.\n          data[parse][therapist[parse]] =\n            data[parse][therapist[parse]] + 1 || 1;\n        }\n      }\n    }\n\n    this.setState({\n      data,\n    });\n  };\n\n  componentDidMount() {\n    // Gets all members right away on loading\n    this.props.dispatch({ type: \"FETCH_MEMBERS\" });\n  }\n\n  componentDidUpdate() {\n    // Sets the therapists and updates the data when it recieves the data\n    if (this.state.therapists !== this.props.members) {\n      this.setState(\n        {\n          therapists: this.props.members,\n        },\n        function () {\n          this.parseSearchData();\n        }\n      );\n    }\n  }\n\n  switchChange = (event) => {\n    this.setState({\n      advanced: event.target.checked,\n    });\n  };\n\n  render() {\n    return (\n      <>\n        <Form style={{ width: \"80%\", margin: \"20px auto\" }}>\n          {this.state.advanced ? (\n            <div>\n              <div className=\"flex-between row-wrap\">\n                <Form.Group controlId=\"Advanced-zip\" className=\"advanced-input\">\n                  <Form.Label>Name</Form.Label>\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Name\"\n                    onChange={(event) => this.onSearchChangeAdv(event, \"name\")}\n                  />\n                </Form.Group>\n                <Form.Group controlId=\"Advanced-zip\" className=\"advanced-input\">\n                  <Form.Label>Island, City or Zip Code</Form.Label>\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"City or Zip Code\"\n                    onChange={(event) => this.onSearchChangeAdv(event, \"zip\")}\n                  />\n                </Form.Group>\n                <SearchSelect\n                  name=\"Languages\"\n                  array={this.state.data.languages}\n                  onChange={(event) =>\n                    this.onSearchChangeAdv(event, \"languages\")\n                  }\n                  value={this.state.languages || null}\n                />\n                <SearchSelect\n                  name=\"Specialization\"\n                  array={this.state.data.specialty}\n                  onChange={(event) =>\n                    this.onSearchChangeAdv(event, \"specialty\")\n                  }\n                  value={this.state.specialty || null}\n                />\n                <SearchSelect\n                  name=\"Supervision Status\"\n                  array={this.state.data.supervision_status}\n                  onChange={(event) =>\n                    this.onSearchChangeAdv(event, \"supervision_status\")\n                  }\n                  value={this.state.supervision_status || null}\n                />\n                <SearchSelect\n                  name=\"Insurance Taken\"\n                  array={this.state.data.insurance}\n                  onChange={(event) =>\n                    this.onSearchChangeAdv(event, \"insurance\")\n                  }\n                  value={this.state.insurance || null}\n                />\n                <SearchSelect\n                  name=\"Treatment Approaches/Preferences\"\n                  array={this.state.data.treatment_preferences}\n                  onChange={(event) =>\n                    this.onSearchChangeAdv(event, \"treatment_preferences\")\n                  }\n                  value={this.state.treatment_preferences || null}\n                />\n                <div className=\"flex-between advanced-input\">\n                  <SearchSelect\n                    name=\"Age Focus\"\n                    array={this.state.data.ages_served}\n                    onChange={(event) =>\n                      this.onSearchChangeAdv(event, \"ages_served\")\n                    }\n                    value={this.state.ages_served || null}\n                  />\n                  <SearchSelect\n                    name=\"Demographic Focus\"\n                    array={this.state.data.client_focus}\n                    onChange={(event) =>\n                      this.onSearchChangeAdv(event, \"client_focus\")\n                    }\n                    value={this.state.client_focus || null}\n                  />\n                </div>\n                <SearchSelect\n                  name=\"Session Format(s)\"\n                  array={this.state.data.session_format}\n                  onChange={(event) =>\n                    this.onSearchChangeAdv(event, \"session_format\")\n                  }\n                  value={this.state.session_format || null}\n                />\n                <Form.Check\n                  type=\"switch\"\n                  id=\"telehealth\"\n                  label=\"Provides Telehealth\"\n                  className=\"switch\"\n                  onChange={this.onTelehealthChange}\n                  value={this.state.telehealth || false}\n                />\n              </div>\n              <Button\n                variant=\"primary\"\n                type=\"submit\"\n                style={{ float: \"right\" }}\n                onClick={this.advancedSearchSubmit}\n              >\n                Search\n              </Button>\n            </div>\n          ) : (\n            <Form.Group\n              controlId=\"simple-search\"\n              onSubmit={this.onSearchClicked}\n            >\n              <Form.Label>Find a Therapist</Form.Label>\n              <InputGroup className=\"mb-3\">\n                <Form.Control\n                  placeholder=\"Island, City or Zip Code\"\n                  aria-label=\"Island, City or Zip Code\"\n                  aria-describedby=\"basic-addon2\"\n                  onChange={this.onSearchChange}\n                />\n                <InputGroup.Append>\n                  <Button\n                    variant=\"primary\"\n                    type=\"submit\"\n                    onClick={this.onSearchClicked}\n                  >\n                    Search\n                  </Button>\n                </InputGroup.Append>\n              </InputGroup>\n            </Form.Group>\n          )}\n          {this.state.data && (\n            <Form.Check\n              type=\"switch\"\n              id=\"custom-switch\"\n              label=\"Advanced Search\"\n              className=\"switch\"\n              onChange={this.switchChange}\n            />\n          )}\n        </Form>\n        <SearchResults therapists={this.state.therapists} />\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({ members }) => ({ members });\n \nexport default connect(mapStateToProps)(SearchBar);","//this component is imported into App.js and renders the initial view of the app.\n\nimport React, { Component } from 'react';\n\nimport SearchBar from '../SearchBar/SearchBar'\n\n\nclass HomePage extends Component{\n    render(){\n        return(\n            <>\n                <SearchBar />\n            </>\n        );\n    }\n}\n\nexport default HomePage;\n","import React, { Component} from 'react';\n//used to connect the component to the reducer\nimport { connect } from 'react-redux';\n\n//React-bootstrap import\nimport ProgressBar from 'react-bootstrap/ProgressBar';\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\n\n\n\n\nclass ProfileCreate extends Component {\n\n    //create a state \n    state = {\n    prefix:'',\n\tfirst_name:'',\n\tlast_name:'',\n    age:'',\n    hiamft_member_account_info:'',\n\tlanguage_id:''\n    }\n//when the document is ready it will fetch all the languages\n//from which users can choose the languages they speak\ncomponentDidMount(){\n this.getLanguages()\n}\n//take in the information from the input\n//when users either choose options from drop down or put info into the input\n//the state is changed when there are input data\n    handleInputChangeFor = propertyName => (event) =>{\n        this.setState({\n          [propertyName]:event.target.value\n        });\n      } \n//reset the inputs once the value has been submitted\n      handleReset = () =>{\n          this.setState({\n            prefix:'',\n            first_name:'',\n            last_name:'',\n            age:'',\n            hiamft_member_account_info:'',\n            language_id:''\n          })\n      }\n\n      \n//upload all the inputs into the members table\n//this will send all the profile info from createProfile page into SET_CREATE_PROFILE reducer\n//once they are sent to the reducer, the data can then be retrievied in practiceInfo\n//where it will be bunched up all together with all other inputs from other pages\n//it then gets dispatch as an action for post request to the server\n    addMembers = (event) =>{\n     event.preventDefault();\n     this.props.dispatch({\n         type:'ADD_CREATE_PROFILE',\n         payload:{\n            prefix:this.state.prefix,\n            first_name:this.state.first_name,\n            last_name:this.state.last_name,\n            age:this.state.age,\n            hiamft_member_account_info:this.state.hiamft_member_account_info,\n            language_id:this.state.language_id\n         }\n     });\n    this.handleReset();\n    }\n\n   \n    //get the languges\n    getLanguages = () =>{\n        this.props.dispatch({\n            type:'FETCH_LANGUAGES'});\n           \n    }\n     handleNext = (event) => {\n        event.preventDefault ()\n        this.props.history.push('/contact-info')\n    \n    }\n    render (){\n        return (\n            <>\n            <div className ='container'>\n         <header><h1>Create New Profile</h1></header>\n         <br/>\n\n        <ProgressBar now={25} />\n\n         <Form onSubmit={this.addMembers}>\n         <h3>Basic Info</h3>\n         <label>Prefix</label>\n         <br/>\n         <input \n                  type=\"text\"\n                  name=\"prefix\"\n                  value={this.state.prefix}\n                  onChange={this.handleInputChangeFor(\"prefix\")}/><br/>\n         <Form.Label>First Name</Form.Label>\n         <br/><input \n                  type=\"text\"\n                  name=\"first_name\"\n                  value={this.state.first_name}\n                  onChange={this.handleInputChangeFor(\"first_name\")}/><br/>\n         <Form.Label>Last Name</Form.Label><br/>\n         <input \n                  type=\"text\"\n                  name=\"last_name\"\n                  value={this.state.last_name}\n                  onChange={this.handleInputChangeFor(\"last_name\")}/><br/>\n         <Form.Label>Age</Form.Label><br/>\n         <input \n                   type=\"text\"\n                  name=\"age\"\n                  value={this.state.age}\n                  onChange={this.handleInputChangeFor(\"age\")}/>\n        <br/>\n        <br/>\n         <Form.Label>Language Spoken</Form.Label><br/>\n         <Form.Control\n          as=\"select\" onChange={this.handleInputChangeFor(\"language_id\")}>\n                   {this.props.languages &&\n                   \n                   <>\n                   <option defaultValue='Select a language'>Select a language</option>\n                   {this.props.languages.map(language =>\n                    <option value={language.language_id}\n        \n                  key={language.language_id}>{language.title}</option>\n                    )}\n                   </>\n                   } \n         </Form.Control> \n        <br/>\n        <br/>\n        <button>+</button><label>Add a Field</label>\n        <br/>\n        <br/>\n        <Form.Label>About You</Form.Label>\n        <br/>\n        <textarea type=\"text\"\n                  name=\"hiamft_member_account_info\"\n                  value={this.state.hiamft_member_account_info}\n                  onChange={this.handleInputChangeFor(\"hiamft_member_account_info\")}/>\n        <br/>\n        <Button type=\"submit\">Save</Button>\n         </Form>\n         <Button onClick={this.handleNext}>Next Page</Button>\n            </div>\n            </>\n        )\n    }\n}\nconst mapStateToProps = reduxstate => ({\n    reduxstate,\n    languages: reduxstate.languages,\n    user: reduxstate.user\n  });\n\nexport default connect(mapStateToProps)(ProfileCreate);","import React,{ Component } from 'react';\n//this connects the the component to the redux store\nimport { connect } from 'react-redux';\n\n//React-bootstrap import\nimport ProgressBar from 'react-bootstrap/ProgressBar';\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\n\n\n\n\nclass ContactInfo extends Component{\n// create the state\n           state = {\n            island_id:'',\n            zip_code:'',\n            business_number:'',\n            personal_number:'',\n            email:'',\n            personal_email:'',\n            website:'',\n            address_office:'',\n            address_home:'',\n            address_mailing:'',\n            city:'',\n           }\n\n           componentDidMount (){\n//when the document is ready it will fetch all the options for islands\n            this.props.dispatch({\n                type:'FETCH_ISLANDS'\n            })\n           }\n//this will help navigate to back to createProfile page\n    handleBack = (event) => {\n        event.preventDefault()\n        this.props.history.push('/create-profile')\n    }\n//this will help navigate to the practiceinfo page\n    handleNext = (event) => {\n        event.preventDefault()\n        this.props.history.push('/practice')\n    }\n//take in the information from the input\n//when users either choose options from drop down or put info into the input\n//the state is changed when there are input data\n    handleInputChangeFor = propertyName => (event) =>{\n        this.setState({\n          [propertyName]:event.target.value\n        })\n      } \n\n     \n      addContactInfo = (event) =>{\n//this will send all the contact info from contactinfo page into SET_ADDRESS reducer\n//once they are sent to the reducer, the data can then be retrievied in practiceInfo\n//where it will be bunched up all together with all other inputs from other pages\n//it will then gets used to dispatch an action for post request to the server\n          event.preventDefault();\n          this.props.dispatch({type:'ADD_ADDRESS', \n                              payload:{island_id: this.state.island_id, \n                                        email: this.state.email,\n                                        personal_email:this.state.personal_email,\n                                        business_number:this.state.business_number,\n                                        personal_number:this.state.personal_number,\n                                        address_office:this.state.address_office,\n                                        address_home:this.state.address_home,\n                                        address_mailing:this.state.address_mailing,\n                                        zip_code: this.state.zip_code,\n                                        city: this.state.city,\n                                        website: this.state.website\n          }});\n                        \n     }\n   \n    render (){\n        return(\n            <>\n            <div className='container'>\n            <header><h1>Contact Info</h1></header>\n             <br/>\n            <ProgressBar now={50} />\n            <Form onSubmit={this.addContactInfo}>\n             <label>Island</label>\n             <br/>\n             <Form.Control\n                 as=\"select\" onChange={this.handleInputChangeFor(\"island_id\")}>\n             {this.props.islands &&\n                   \n                   <>\n                   <option defaultValue='Select your Island'>Select your Island</option>\n                   {this.props.islands.map(island =>\n                    <option value={island.island_id}\n        \n                  key={island.island_id}>{island.title}</option>\n                    )}\n                   </>\n                   } \n             </Form.Control>\n             <br/>\n             <br/>\n             <Form.Label>Zip Code</Form.Label>\n             <br/>\n             <input type=\"number\"\n                  name=\"zip_code\"\n                  value={this.state.zip_code}\n                  onChange={this.handleInputChangeFor(\"zip_code\")}/>\n                <br/>\n             <Form.Label>Phone Number - Business</Form.Label>\n             <br/>\n             <input type=\"number\"\n                  name=\"business_number\"\n                  value={this.state.business_number}\n                  onChange={this.handleInputChangeFor(\"business_number\")}/>\n             <br/>\n             <br/>\n             <Form.Label>Phone Number - Personal</Form.Label>\n             <br/>\n             <input type=\"number\"\n                  name=\"personal_number\"\n                  value={this.state.personal_number}\n                  onChange={this.handleInputChangeFor(\"personal_number\")}/>\n                <br/>\n             <Form.Label>Email Address - Business</Form.Label>\n             <br/>\n             <input type=\"text\"\n                  name=\"email\"\n                  value={this.state.email}\n                  onChange={this.handleInputChangeFor(\"email\")}/>\n             <br/>\n             <Form.Label>Email Address - Personal</Form.Label>\n             <br/>\n             <input type=\"text\"\n                  name=\"personal_email\"\n                  value={this.state.personal_email}\n                  onChange={this.handleInputChangeFor(\"personal_email\")}/>\n             <br/>\n             <Form.Label>Website</Form.Label>\n             <br/>\n             <input type=\"text\"\n                  name=\"website\"\n                  value={this.state.website}\n                  onChange={this.handleInputChangeFor(\"website\")}/>\n             <br/>\n             <Form.Label>Address - Office</Form.Label>\n             <br/>\n             <input type=\"text\"\n                  name=\"address_office\"\n                  value={this.state.address_office}\n                  onChange={this.handleInputChangeFor(\"address_office\")}/>\n             <br/>\n             <Form.Label>Address - Home</Form.Label>\n             <br/>\n             <input type=\"text\"\n                  name=\"address_home\"\n                  value={this.state.address_home}\n                  onChange={this.handleInputChangeFor(\"address_home\")}/>\n             <br/>\n             <Form.Label>Address - Mailing</Form.Label>\n             <br/>\n             <input type=\"text\"\n                  name=\"address_mailing\"\n                  value={this.state.address_mailing}\n                  onChange={this.handleInputChangeFor(\"address_mailing\")}/>\n             <br/>\n             <br/>\n             <Form.Label>City</Form.Label>\n             <br/>\n             <input type=\"text\"\n                  name=\"city\"\n                  value={this.state.city}\n                  onChange={this.handleInputChangeFor(\"city\")}/>\n             <br/>\n             <br/>\n            \n           <Button type=\"submit\">Save</Button>\n            </Form>\n            <Button onClick={this.handleBack}>Back</Button>\n            <Button onClick={this.handleNext}>Next</Button>\n\n            </div>\n           \n\n            </>\n        )\n    }\n\n}\nconst mapStateToProps = reduxstate => ({\n    reduxstate,\n    islands: reduxstate.islands,\n    user: reduxstate.user\n  });\nexport default connect (mapStateToProps)(ContactInfo);","import React,{ Component } from 'react';\n//this connects the component to th redux store\nimport { connect } from 'react-redux';\n\n//React-bootstrap import\nimport ProgressBar from 'react-bootstrap/ProgressBar';\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\n\n\n\n\nclass PracticeInfo extends Component{\n     //create local state\n\n     state = {\n         license_state:'',\n         license_number:'',\n         license_type:'',\n         supervision_status:'',\n         fees:'',\n         license_expiration:'',\n         credentials:'',\n         telehealth:'',\n         statement:'',\n         title:'',\n         session_format_id:'',\n         client_focus_id:'',\n         specialty_id:'',\n         treatment_preferences_id:'',\n         age_groups_served_id:'',\n\n     }\n   \ncomponentDidMount (){\n  //dispatch actions in order to fetch the data for options that users can select\n  //the actions are dispatched when document is on ready to be used \n    this.props.dispatch({type:'FETCH_INSURANCE_TAKEN'});\n    this.props.dispatch({type:'FETCH_SPECIALTY'});\n    this.props.dispatch({type:'FETCH_SUPERVISION_STATUS'});\n    this.props.dispatch({type:'FETCH_TREATMENT_APPROACHES'});\n    this.props.dispatch({type:'FETCH_LICENSE_TYPE'});\n    this.props.dispatch({type:'FETCH_DEMOGRPHICS'});\n    this.props.dispatch({type:'FETCH_AGE_GROUPS'});\n    this.props.dispatch({type:'FETCH_SESSION_FORMAT'});\n}\n\n//take in the information from the input\n//when users either choose options from drop down or put info into the input\n//the state is changed when there are input data\nhandleInputChangeFor = propertyName => (event) =>{\n    this.setState({\n      [propertyName]:event.target.value\n    });\n  } \n    handleBack = (event) => {\n//will help navigate back to the previous page\n//that is contact infor page\n        event.preventDefault()\n        this.props.history.push('/contact-info')\n    }\n\n    \n    handleNext = (event) => {\n//this helps to navigate to the next page\n//that is the profile edit page\n        event.preventDefault()\n        this.props.history.push(`/edit-profile/${this.props.user.id}`)\n    }\n    \n\n    addMembersInfo = (event) =>{\n//this action will dispatch all the info collegeted from all three pages\n//and those are createprofile, contactinfo and practicinfo pages\n      event.preventDefault();\n      this.props.dispatch({type:'ADD_MEMBER',\n        payload:{\n          prefix:this.props.createProfile.prefix,\n          first_name:this.props.createProfile.first_name,\n          last_name:this.props.createProfile.last_name,\n          age:this.props.createProfile.age,\n          hiamft_member_account_info:this.props.createProfile.hiamft_member_account_info,\n          license_state:this.state.license_state,\n          supervision_status:this.state.supervision_status,\n          fees:this.state.fees,\n          license_expiration:this.state.license_expiration,\n          license_number:this.state.license_number,\n          license_type:this.state.license_type_id,\n          credentials:this.state.credentials,\n          telehealth:this.state.telehealth,\n          statement:this.state.statement,\n          title:this.state.title,\n          website:this.props.contactAddress.website,\n          city:this.props.contactAddress.city,\n          zip_code: this.props.contactAddress.zip_code,\n          island_id: this.props.contactAddress.island_id,\n          email: this.props.contactAddress.email,\n          personal_email:this.props.contactAddress.personal_email,\n          business_number:this.props.contactAddress.business_number,\n          personal_number:this.props.contactAddress.personal_number,\n          address_office:this.props.contactAddress.address_office,\n          address_home:this.props.contactAddress.address_home,\n          address_mailing:this.props.contactAddress.address_mailing,\n          session_format_id:this.state.session_format_id,\n          client_focus_id:this.state.client_focus_id,\n          specialty_id:this.state.specialty_id,\n          treatment_preferences_id:this.state.treatment_preferences_id,\n          age_groups_served_id:this.state.age_groups_served_id,\n          insurance_type_id:this.state.insurance_type_id,\n          language_id:this.props.createProfile.language_id\n         }\n        });\n//this will reset the inputs on the parcticeinfo page\n     this.handleReset();\n    }\n\n    handleReset = ()=>{\n      this.setState({\n        license_state:'',\n        license_number:'',\n        license_type:'',\n        supervision_status:'',\n        fees:'',\n        license_expiration:'',\n        specialty:'',\n        credentials:'',\n        telehealth:'',\n        statement:'',\n        title:'',\n        session_format_id:'',\n        client_focus_id:'',\n        specialty_id:'',\n        treatment_preferences_id:'',\n        age_groups_served_id:'',\n        insurance_type_id:'',\n\n      })\n    }\n    render (){\n        return(\n            <>\n            <div className='container'>\n        <header><h1>Practice Info</h1></header>\n        <br/>\n        <ProgressBar now={75} />\n        <br/>\n        <Form onSubmit={this.addMembersInfo}>\n        <br/>\n        <br/>\n        <Form.Label>Title </Form.Label><br/><input type=\"text\"\n                  name=\"title\"\n                  value={this.state.title}\n                  onChange={this.handleInputChangeFor(\"title\")}/>\n        <br/>\n        <br/>\n        <Form.Label>Credentials </Form.Label><br/><input type=\"text\"\n                  name=\"title\"\n                  value={this.state.credentials}\n                  onChange={this.handleInputChangeFor(\"credentials\")}/>\n        <br/>\n        <br/>\n        <Form.Label>License Type</Form.Label><br/><select onChange={this.handleInputChangeFor(\"license_type_id\")}>\n        {this.props.license &&    \n                   <>\n                   <option value='' defaultValue='Select License Type'>Select License Type</option>\n                   {this.props.license.map(licensetype =>\n                    <option value={licensetype.license_type_id}\n        \n                  key={licensetype.license_type_id}>{licensetype.title}</option>\n                    )}\n                   </>\n                   } \n           </select>\n        <br/>\n        <br/>\n        <button>+</button><label>Add a Field</label>\n        <br/>\n        <br/>\n        <Form.Label>License State of Issue</Form.Label><br/><input type=\"text\"\n                  name=\"license_state\"\n                  value={this.state.license_state}\n                  onChange={this.handleInputChangeFor(\"license_state\")}/>\n        <br/>\n        <br/>\n        <Form.Label>License Number</Form.Label><br/><input type=\"number\"\n                  name=\"license_number\"\n                  value={this.state.license_number}\n                  onChange={this.handleInputChangeFor(\"license_number\")}/>\n        <br/>\n        <br/>\n        <Form.Label>License Expiration Date</Form.Label><br/><input \n                  type='date'\n                  name=\"license_expiration\"\n                  value={this.state.license_expiration}\n                  onChange={this.handleInputChangeFor(\"license_expiration\")}/>\n        <br/>\n        <br/>\n        <Form.Label>Statement</Form.Label><br/><input type=\"text\"\n                  name=\"statement\"\n                  value={this.state.statement}\n                  onChange={this.handleInputChangeFor(\"statement\")}/>\n                   <br/>\n                   <br/>\n        <Form.Label>Fees</Form.Label><br/><input type=\"text\"\n                  name=\"fees\"\n                  value={this.state.fees}\n                  onChange={this.handleInputChangeFor(\"fees\")}/>\n                   <br/>\n                   <br/>\n        <Form.Label>Specialization</Form.Label><br/><select onChange={this.handleInputChangeFor(\"specialty_id\")}>\n                {this.props.specialtys &&\n                   \n                   <>\n                  \n            <option value='' defaultValue='Select a Speciality'>Select a Speciality</option>\n                   {this.props.specialtys.map(specialty =>\n                    <option value={specialty.specialty_id}\n        \n                  key={specialty.specialty_id}>{specialty.title}</option>\n                    )}\n                   </>\n                   } \n            \n            </select>\n        <br/>\n        <br/>\n        <button>+</button><label>Add a Field</label>\n        <br/>\n        <br/>\n        <Form.Label>Supervision Status</Form.Label><br/><select onChange={this.handleInputChangeFor(\"supervision_status\")}>\n                   <option value=\"None\">None</option>\n                   <option value=\"Hawai'i qualified\">Hawai'i qualified</option>\n                   <option value=\"MFT supervisor\">MFT supervisor</option>\n                   <option value=\"AAMFT approved\">AAMFT approved</option>\n                   <option value=\"Supervisor\">Supervisor</option>\n           </select>\n        <br/>\n        <br/>\n        <button>+</button><label>Add a Field</label>\n        <br/>\n        <br/>\n        <Form.Label>Insurance Taken</Form.Label><br/><select onChange={this.handleInputChangeFor(\"insurance_type_id\")}>\n        {this.props.insuranceTaken &&    \n                   <>\n                  <option value='' defaultValue='Select Insurance Type'>Select Insurance Type</option>\n                   {this.props.insuranceTaken.map(insurance =>\n                    <option value={insurance.insurance_type_id}\n        \n                  key={insurance.insurance_type_id}>{insurance.title}</option>\n                    )}\n                   </>\n                   } \n            </select>\n        <br/>\n        <br/>\n        <button>+</button><label>Add a Field</label>\n        <br/>\n        <br/>\n        <Form.Label>Are you providing telehealth?</Form.Label>\n        <br/>\n        <label>Yes</label><input \n                              type='radio' \n                              name='choice' \n                              value='yes' \n                              onChange={this.handleInputChangeFor(\"telehealth\")}/>\n        <label>No</label><input \n                              type='radio' \n                              name='choice' \n                              value='no'\n                              onChange={this.handleInputChangeFor(\"telehealth\")}/>\n        <br/>\n        <br/>\n        <Form.Label>Treatment Approaches/Preferences</Form.Label><br/><select onChange={this.handleInputChangeFor(\"treatment_preferences_id\")}>\n        {this.props.treatmentPreferences &&    \n                   <>\n                <option value='' defaultValue='Select an Approach'>Select an Approach</option>\n                   {this.props.treatmentPreferences.map(treatment =>\n                    <option value={treatment.treatment_preferences_id}\n        \n                  key={treatment.treatment_preferences_id}>{treatment.title}</option>\n                    )}\n                   </>\n                   } \n          </select>\n        <br/>\n        <br/>\n        <button>+</button><label>Add a Field</label>\n        <br/>\n        <br/>\n        <Form.Label>Client Focus</Form.Label><br/><select onChange={this.handleInputChangeFor(\"client_focus_id\")}>\n        {this.props.demographics &&    \n                   <>\n               \n                <option value='' defaultValue='Select a Demographic'>Select a Demographic</option>\n                   {this.props.demographics.map(group =>\n                    <option value={group.client_focus_id}\n        \n                  key={group.client_focus_id}>{group.title}</option>\n                    )}\n                   </>\n                   } \n            </select>\n        <select onChange={this.handleInputChangeFor(\"age_groups_served_id\")}>\n        {this.props.ageGroups &&    \n                   <>\n                <option value='' defaultValue='Select an Age Group'>Select an Age Group</option>\n                   {this.props.ageGroups.map(agegroup=>\n                    <option value={agegroup.age_groups_served_id}\n        \n                  key={agegroup.age_groups_served_id}>{agegroup.title}</option>\n                    )}\n                   </>\n                   } \n           </select>\n        <br/>\n        <br/>\n        <button>+</button><label>Add a Field</label>\n        <button>+</button><label>Add a Field</label>\n        <br/>\n        <br/>\n        <Form.Label>Session Format(s)</Form.Label><br/><select onChange={this.handleInputChangeFor(\"session_format_id\")}>\n        {this.props.sessionFormats &&    \n                   <>\n                 <option value='' defaultValue='Select a Session Format'>Select a Session Format</option>\n                   {this.props.sessionFormats.map(session =>\n                    <option value={session.session_format_id}\n        \n                  key={session.session_format_id}>{session.title}</option>\n                    )}\n                   </>\n                   } \n           </select>\n        <br/>\n        <br/>\n        <button>+</button><label>Add a Field</label>\n        <br/>\n        <br/>\n        <Button type=\"submit\">Save</Button>\n        </Form>\n            \n          <Button onClick={this.handleBack}>Back</Button>\n          <Button onClick={this.handleNext}>Next</Button>\n           \n          \n\n            </div>\n           \n            </>\n        )\n    }\n\n}\n\nconst mapStateToProps = reduxstate => ({\n    languages: reduxstate.languages,\n    specialtys: reduxstate.specialtys,\n    insuranceTaken: reduxstate.insuranceTaken,\n    license: reduxstate.license,\n    treatmentPreferences:reduxstate.treatmentPreferences,\n    demographics:reduxstate.demographics,\n    ageGroups:reduxstate.ageGroups,\n    sessionFormats:reduxstate.sessionFormats,\n    createProfile: reduxstate.createProfile,\n    contactAddress: reduxstate.contactAddress,\n    user: reduxstate.user\n  });\nexport default connect(mapStateToProps)(PracticeInfo);","import React, { useState } from \"react\";\n\n//React-bootstrap imports\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Form from \"react-bootstrap/Form\";\nimport { connect } from \"react-redux\";\n\nfunction EmailModal(props) {\n  const [show, setShow] = useState(false);\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n  console.log(props);\n  return (\n    <>\n      <Button variant=\"primary\" onClick={handleShow}>\n        Send Referral Email\n      </Button>\n\n      <Modal show={show} onHide={handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>Send Referral Email for {props.profile.first_name} {props.profile.last_name}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Form>\n            <Form.Group controlId=\"formBasicEmail\">\n              <Form.Label>Recipient's Email Address</Form.Label>\n              <Form.Control type=\"email\" placeholder=\"Enter email\" />\n            </Form.Group>\n\n            <Form.Group controlId=\"formBriefMessage\">\n              <Form.Label>Brief Message</Form.Label>\n              <Form.Control\n                type=\"input\"\n                as=\"textarea\"\n                rows=\"10\"\n                placeholder={`Hello, \n${props.profile.first_name} ${props.profile.last_name} is a colleague of mine I think she'd be a great fit for you! Below is her contact info.\nBest wishes!`}\n              />\n              <Form.Control\n                rows=\"5\"\n                plaintext\n                readOnly\n                defaultValue={`${props.profile.website} ${props.profile.phone} ${props.profile.address}\n                             `}\n              />\n            </Form.Group>\n            <Button variant=\"primary\" onClick={handleClose}>\n              Send Email\n            </Button>\n          </Form>\n        </Modal.Body>\n      </Modal>\n    </>\n  );\n}\nconst mapStateToProps = (state) => ({\n  profile: state.profile,\n});\nexport default connect(mapStateToProps)(EmailModal);\n","import React, { Component } from \"react\";\nimport \"./ProfileView.css\";\nimport { connect } from \"react-redux\";\nimport Button from 'react-bootstrap/Button';\nimport EmailModal from '../EmailModal/EmailModal'\nimport {\n  Map,\n  InfoWindow,\n  Marker,\n  GoogleApiWrapper\n} from \"google-maps-react\";\n\n//CSS import\nimport \"../App/App.css\";\n\nconst API_KEY = process.env.REACT_APP_GOOGLE_MAPS_KEY;\n\nconst mapStyles = {// map size\n  width: \"250px\",\n  height: \"250px\",\n};\n\nclass ProfileView extends Component {\n  state = {\n    lat: 0,\n    lng: 0,\n  };\n  componentDidMount() {// fetchs profile info\n    this.props.dispatch({\n      type: \"FETCH_PROFILE\",\n      payload: this.props.match.params,\n    });\n    console.log(this.props)\n  }\n  telehealth=(doesTelehealth)=>{// returns based on telehealth \n    if(doesTelehealth){\n      return <p>Yes I do provide telehealth</p>\n    }\n    else{\n      return <p>No, I do not provide telehealth at this time</p>\n    }\n  }\n  credentials=(credentials)=>{// checks if credentials are there function\n    if(credentials){\n      return<ul>{this.props.profile[0].credentials.map((credentials,key) =>\n        <p key={key}>{credentials}</p>)}\n        </ul>\n    }\n  }\n  website=(website)=>{// checks if website is there function\n    if(website){\n      return (\n        <a href={this.props.profile.website}>\n          {this.props.profile.website}\n        </a>\n      );\n    }\n  }\n  setMAP = () => { // function that sets the map latitudes only when it was unchanged to stop infinete loop. I do not know how to set up async for when the dispatch is done.\n    if (this.state.lat === 0 && this.state.lng === 0 ) {\n      console.log(this.props.profile.address[0]);\n      const url_address = encodeURI(this.props.profile.address[0]).replace(\n        /%20/g,\n        \"+\"\n      );\n      fetch(\n        `https://maps.googleapis.com/maps/api/geocode/json?address=${url_address}&key=${API_KEY}`\n      )\n        .then((data) => data.json())\n        .then((data) =>\n          this.setState({\n            lat: data.results[0].geometry.location.lat,\n            lng: data.results[0].geometry.location.lng,\n          })\n        );\n    }\n  };\n  onMarkerClick = (props, marker, e) =>\n    this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true,\n    });\n  onMapClicked = (props) => {\n    console.log(this.props);\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null,\n      });\n    }\n  };\n  home = () => {\n    this.props.history.push('/home')\n  }\n\n  render() {\n    console.log(this.props)\n    if (this.props.profile.first_name) {// waits for the dispatch to have finished\n      this.setMAP();// sets the map\n      return (\n        <>\n          <div className=\"profileView-container\">\n            <div className=\"bio-container\">\n              <Button onClick={this.home} className=\"backSearch\">\n                Back to search Results\n              </Button>\n              <div className=\"bio-title\">\n                <div className=\"leftside\">\n                  <h2>\n                    {this.props.profile.first_name}{\" \"}\n                    {this.props.profile.last_name}\n                  </h2>\n                  {this.credentials()}\n                </div>\n                <div className=\"bio\">\n                  <p>{this.props.profile.statement}</p>\n                </div>\n              </div>\n              <div className=\"border-top\">\n                <h4>Treatments & Approaches</h4>\n                <div className=\"ts\">\n                  <ul>\n                    {this.props.profile.treatment_preferences.map(\n                      (treatment_preferences, key) => (\n                        <p key={key}>{treatment_preferences}</p>\n                      )\n                    )}\n                  </ul>\n                </div>\n              </div>\n              <div className=\"border-top\">\n                <h4>Specialities</h4>\n                <ul>\n                  {this.props.profile.specialty.map((specialty, key) => (// maps through specialities of therapist\n                    <p key={key}>{specialty}</p>\n                  ))}\n                </ul>\n              </div>\n              <div className=\"border-top\">\n                <h4>Insurance Taken</h4>\n                <div className=\"box1 flex-between row-wrap\">\n                  <ul>\n                    {this.props.profile.insurance.map((age, key) => (// maps through ages served\n                      <p key={key}>{age}</p>\n                    ))}\n                  </ul>\n                </div>\n              </div>\n              <div className=\"border-top\">\n                <h4>Supervision Status</h4>\n                <div className=\"box1\">\n                  <ul className=\"flex-between row-wrap\">\n                    <p>{this.props.profile.supervision_status}</p>\n                  </ul>\n                </div>\n              </div>\n              <div className=\"telehealth border-top\">\n                <h4>Telehealth</h4>\n                <ul className=\"flex-between row-wrap\">\n                  <p>{this.telehealth()}</p>\n                  {/* Checkes whether the Telehealth is true or not and then returns statement saying Telehealth is offered or not depending on profile.telehealth */}\n                </ul>\n              </div>\n              <div className=\"border-top\">\n                <h4>Client Focus</h4>\n              </div>\n              <div className=\"clientFocus row-wrap\">\n                <div className=\"clientAge\">\n                  <h5>Age</h5>\n                  <ul>\n                    {this.props.profile.ages_served.map((age, key) => (// maps through the ages served by the therapist\n                      <p key={key}>{age}</p>\n                    ))}\n                  </ul>\n                </div>\n                <div className=\"clientDemographics\">\n                  <h5>Demographics</h5>\n                  <ul>\n                    {this.props.profile.client_focus.map((age, key) => (// maps through the client focuses of the therapist\n                      <p key={key}>{age}</p>\n                    ))}\n                  </ul>\n                </div>\n              </div>\n              <div className=\"border-top\">\n                <h4>Languages Spoken</h4> \n                <ul>\n                  {this.props.profile.languages.map((language, key) => (// maps through the languages spoken\n                    <p key={key}>{language}</p>\n                  ))}\n                </ul>\n              </div>\n              <div className=\"border-top\">\n                <h4>Session Formats</h4>\n                <ul>\n                  {this.props.profile.session_format.map(// maps through the session_formats available\n                    (session_format, key) => (\n                      <p key={key}>{session_format}</p>\n                    )\n                  )}\n                </ul>\n              </div>\n            </div>\n            <div className=\"rightside\">\n              <div>\n                <h3>\n                  {this.props.profile.city}, {this.props.profile.island}\n                </h3>\n              </div>\n              <div className=\"emailModal\">\n                <EmailModal props = {this.props.profile.id}></EmailModal>\n              </div>\n              <div className=\"contact\">\n                <h4>Contact</h4>\n                <ul>\n                  {this.props.profile.phone[0]}\n                  {/* Since there will only be one phone and no non business numbers I think we can simply just call the first one */}\n                  <div>{this.props.profile.email[0]}</div>\n                  {/* Same with email */}\n                  <p>{this.website(this.props.profile.website)}</p>\n                  {/* chceks to see if website is there adds if there is */}\n                  <p>\n                    {this.props.profile.address} {this.props.profile.zip_code}\n                  </p>\n                </ul>\n\n                <div className=\"map\">\n                  <Map // creates google map with the center being where google geocoding api locates lat and long from the address\n                    style={mapStyles}\n                    google={this.props.google}\n                    onClick={this.onMapClicked}\n                    center={{\n                      lat: this.state.lat,\n                      lng: this.state.lng,\n                    }}\n                    zoom={11}\n                  >\n                    <Marker\n                      position={{ lat: this.state.lat, lng: this.state.lng }}\n                    />\n                    <InfoWindow></InfoWindow>\n                  </Map>\n                </div>\n              </div>\n            </div>\n          </div>\n        </>\n      );\n    } else {\n      return <h1>Loading...</h1>;// wait for conditional rendering to load\n    }\n  }\n}\nconst mapStateToProps = (state) => ({// props\n  profile: state.profile,\n});\n\nexport default connect(mapStateToProps)(\n  GoogleApiWrapper({// google apikey and wrapper for the component\n    apiKey: API_KEY,\n  })(ProfileView)\n);\n","// React Imports\nimport React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router\";\n\n// Libraries\nimport FileSaver from \"file-saver\";\n\n// React Bootstrap\nimport FormControl from \"react-bootstrap/FormControl\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport Table from \"react-bootstrap/Table\";\nimport Button from \"react-bootstrap/Button\";\n\n// CSS\nimport './AdminPage.css'\n\n\nclass AdminPage extends Component {\n\n  // therapists is an array of therapists to loop through later\n\n  // Criteria is all the possible search options the server allows.\n  // They start as null and as filters are added they become strings.\n  // This allows for the adding and removing filters seen later.\n  state = {\n    therapists: [],\n    criteria: {\n      name: null,\n      id: null,\n      specialty: null,\n      insurance: null,\n      languages: null,\n      ages_served: null,\n      client_focus: null,\n      license_type: null,\n      session_format: null,\n      license_number: null,\n      island_city_zip: null,\n      supervision_status: null,\n      treatment_preferences: null,\n    },\n  };\n  resetProfile = (id) =>{\n    this.props.dispatch({type:\"PROFILE_RESET\"}) \n    this.props.history.push(`/edit-profile/${id}`)\n  }\n  // When the page loads\n  componentDidMount() {\n    // Grab a complete list of members.\n    this.props.dispatch({ type: \"FETCH_MEMBERS_ADVANCED\", payload: \"\" });\n  }\n\n  // Parses the state and makes the url query then sends the search\n  searchTherapists = () => {\n    // Starts with an empty query string\n    let query = \"\";\n\n    // Loops through the possible search criteria in state\n    for (const key in this.state.criteria) {\n\n      // Makes sure the property actually exists (NEEDED)\n      if (this.state.criteria.hasOwnProperty(key)) {\n        const element = this.state.criteria[key];\n\n        // Checks if the criteria has information to search\n        if (element) {\n          // If not the first item in the query\n          if (query !== \"\") {\n            query += \"&\";\n          }\n\n          // island_city_zip is named zip server side so this renames it\n          if (key === \"island_city_zip\") {\n            query += \"zip\" + \"=\" + element;\n          } else {\n            // Adds the key and value to the query in a url query\n            // useable fashion.\n            query += key + \"=\" + element.replace(\" \", \"+\");\n          }\n        }\n      }\n    }\n\n    // Sends the dispatch\n    this.props.dispatch({\n      type: \"FETCH_MEMBERS_ADVANCED\",\n      payload: query,\n    });\n  };\n\n  // Sets the state of the specific search criteria\n  onSearchChange = (event, Mainkey) => {\n    this.setState({\n      criteria: {\n        ...this.state.criteria,\n        [Mainkey]: event.target.value,\n      },\n    });\n  };\n\n  // Replaces the criteria values as needed. \n  // First it sets the new value to the same as the old one\n  // then it sets the old one to null.\n  onSelectChange = (event, Mainkey) => {\n    this.setState({\n      criteria: {\n        ...this.state.criteria,\n        [event.target.value]: this.state.criteria[Mainkey],\n        [Mainkey]: null,\n      },\n    });\n  };\n\n  // Sets the criteria to null essentially removing it\n  deleteFilter = (Mainkey) => {\n    this.setState({\n      criteria: {\n        ...this.state.criteria,\n        [Mainkey]: null,\n      },\n    });\n  };\n\n  // Shows another bar on the page\n  addFilter = () => {\n    // Loops through the criteria in the state\n    for (const key in this.state.criteria) {\n      if (this.state.criteria.hasOwnProperty(key)) {\n        const element = this.state.criteria[key];\n        // If the element doesn't have a value yet\n        // give it an empty string as a value.\n        if (element === null) {\n          this.setState({\n            criteria: {\n              ...this.state.criteria,\n              [key]: \"\",\n            },\n          });\n\n          // Ends the for loop once the bar has been added.\n          break;\n        }\n      }\n    }\n  };\n\n\n  // Converts an array of objects to CSV and makes it ready for download\n  objectToCsv = (data) => {\n    // Ensures any data exists to parse\n    if (data[0]) {\n      // Starts with an empty array\n      const csvRows = [];\n\n      // The keys of the objects are used as the headers for the CSV\n      const headers = Object.keys(data[0]);\n      csvRows.push(headers.join(\",\"));\n\n      // Loops through the rows in the array\n      for (const row of data) {\n        // maps through the header to know the values to\n        // parse the rest of the objects with.\n        const values = headers.map((header) => {\n          const escaped = (\"\" + row[header]).replace(/\"/g, '\\\\\"');\n          return `\"${escaped}\"`;\n        });\n        csvRows.push(values.join(\",\"));\n      }\n\n      return csvRows.join(`\\n`);\n    }\n  };\n\n  downloadClick = () => {\n    const blob = new Blob([this.state.csv], { type: \"text/csv\" });\n    FileSaver.saveAs(blob, \"workbook.csv\");\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.members !== this.state.therapists) {\n      this.setState({\n        therapists: this.props.members,\n        csv: this.objectToCsv(this.props.members),\n      });\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"container search-bar\">\n          {Object.keys(this.state.criteria).map((Mainkey) => (\n            <>\n              {this.state.criteria[Mainkey] !== null && (\n                <InputGroup style={{ margin: \"10px 0px\" }}>\n                  <FormControl\n                    placeholder=\"Search\"\n                    aria-label=\"Search\"\n                    aria-describedby=\"basic-addon2\"\n                    onChange={(event) => this.onSearchChange(event, Mainkey)}\n                    value={this.state.criteria[Mainkey]}\n                  />\n                  <InputGroup.Append>\n                    <FormControl\n                      as=\"select\"\n                      value={Mainkey}\n                      onChange={(event) => this.onSelectChange(event, Mainkey)}\n                    >\n                      <option value={Mainkey}>\n                        {(Mainkey.charAt(0).toUpperCase() + Mainkey.slice(1))\n                          .split(\"_\")\n                          .join(\" \")}\n                      </option>\n                      {Object.keys(this.state.criteria).map((key) => (\n                        <>\n                          {this.state.criteria[key] === null && (\n                            <option value={key}>\n                              {(key.charAt(0).toUpperCase() + key.slice(1))\n                                .split(\"_\")\n                                .join(\" \")}\n                            </option>\n                          )}\n                        </>\n                      ))}\n                    </FormControl>\n                  </InputGroup.Append>\n                  <InputGroup.Append>\n                    <Button\n                      variant=\"outline-danger\"\n                      onClick={() => this.deleteFilter(Mainkey)}\n                    >\n                      DELETE\n                    </Button>\n                  </InputGroup.Append>\n                </InputGroup>\n              )}\n            </>\n          ))}\n          <div className=\"flex-between\">\n            <Button variant=\"primary\" onClick={this.addFilter}>\n              Add Filter\n            </Button>\n\n            <Button variant=\"primary\" onClick={this.searchTherapists}>\n              Search\n            </Button>\n          </div>\n        </div>\n        <div className=\"container\">\n          <Table striped bordered hover variant=\"dark\">\n            <thead>\n              <tr>\n                <th>ID</th>\n                <th>Name</th>\n                <th>License #</th>\n                <th>License</th>\n                <th></th>\n              </tr>\n            </thead>\n            <tbody>\n              {this.props.members[0] &&\n                this.props.members.map((therapist) => (\n                  <tr>\n                    <td>{therapist.id}</td>\n                    <td>\n                      {therapist.first_name} {therapist.last_name}\n                    </td>\n                    <td>{therapist.license_number}</td>\n                    <td>{therapist.license_title}</td>\n                    <td style={{ textAlign: \"right\" }}>\n                      <Button\n                        variant=\"danger\"\n                        onClick={() =>\n                          this.resetProfile(therapist.id)\n                        \n                        }\n                      >\n                        View\n                      </Button>\n                    </td>\n                  </tr>\n                ))}\n            </tbody>\n          </Table>\n          <div className=\"download\">\n            {this.state.csv && (\n              <Button onClick={this.downloadClick} download>\n                Click to download\n              </Button>\n            )}\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({ members }) => ({ members });\n\nexport default withRouter(connect(mapStateToProps)(AdminPage));","// React Imports\nimport React, {Component} from 'react';\nimport {\n  HashRouter as Router,\n  Route,\n  Redirect,\n  Switch,\n} from 'react-router-dom';\n\n\n// Redux\nimport {connect} from 'react-redux';\n\n// Global Components\nimport NavBootstrap from \"../NavBootstrap/NavBootstrap\";\nimport Footer from '../Footer/Footer';\n\n// Middleware\nimport ProtectedRoute from \"../ProtectedRoute/ProtectedRoute\";\nimport AdminRoute from \"../AdminRoute/AdminRoute\";\n\n// Pages\nimport ContactPage from '../ContactPage/ContactPage';\nimport LoginPage from '../LoginPage/LoginPage';\nimport ProfileEdit from '../ProfileEdit/ProfileEdit';\nimport HomePage from '../HomePage/HomePage';\nimport RegisterPage from '../RegisterPage/RegisterPage';\nimport ProfileCreate from '../ProfileCreate/ProfileCreate'\nimport ContactInfo from '../ProfileCreate/ContactInfo/ContactInfo';\nimport PracticeInfo from '../ProfileCreate/PracticeInfo/PracticeInfo';\nimport ProfileView from '../ProfileView/ProfileView'\nimport AdminPage from '../AdminPage/AdminPage'\n\n\n// CSS\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends Component {\n  componentDidMount () {\n    this.props.dispatch({type: 'FETCH_USER'});\n    this.props.dispatch({type: 'FETCH_LANGUAGES'});\n    this.props.dispatch({type: 'FETCH_ISLANDS'});\n    this.props.dispatch({type: 'FETCH_TREATMENT_APPROACHES'});\n  }\n\n  render() {\n    return (\n      <Router>\n        <div>\n          {/* Rendering NavBar component*/}\n          <NavBootstrap />\n          <Switch>\n            {/* Visiting localhost:3000 will redirect to localhost:3000/home */}\n            <Redirect exact from=\"/\" to=\"/home\" component={HomePage} />\n\n            {/* Visiting localhost:3000/home will show the home page.\n            This is a route anyone can see, no login necessary */}\n            <Route exact path=\"/home\" component={HomePage} />\n\n            {/* This works the same as the other protected route, except that if the user is logged in,\n            they will see the info page instead. */}\n           \n            <Route exact path=\"/contact\" component={ContactPage} />\n            {/*This is a route anyone can see, no login necessary */}\n            <Route exact path=\"/register\" component={RegisterPage} />\n            {/*This is a route anyone can see, no login necessary */}\n            <Route exact path=\"/login\" component={LoginPage} />\n            {/*User only sees these routes if logged in*/}\n            <ProtectedRoute exact path=\"/edit-profile\" component={ProfileEdit} />\n\n            {/* Admin View */}\n            <AdminRoute exact path=\"/edit-profile/:id\" component={ProfileEdit} />\n            <Route exact path=\"/profile/:id\" component={ProfileView} />\n            <ProtectedRoute exact path=\"/create-profile\" component={ProfileCreate} />\n            <ProtectedRoute exact path=\"/contact-info\" component={ContactInfo} />\n            <ProtectedRoute exact path=\"/practice\" component={PracticeInfo} />\n\n\n\n\n            <AdminRoute exact path=\"/admin\" component={AdminPage} />\n\n            {/* If none of the other routes matched, we will show a 404. */}\n            <Route render={() => <h1>404</h1>} />\n          </Switch>\n          <Footer />\n        </div>\n      </Router>\n    );}\n}\n\nexport default connect()(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport logger from 'redux-logger';\n\nimport rootReducer from './redux/reducers'; // imports ./redux/reducers/index.js\nimport rootSaga from './redux/sagas'; // imports ./redux/sagas/index.js\n\nimport App from './components/App/App';\n\nconst sagaMiddleware = createSagaMiddleware();\n\n// this line creates an array of all of redux middleware you want to use\n// we don't want a whole ton of console logs in our production code\n// logger will only be added to your project if your in development mode\nconst middlewareList = process.env.NODE_ENV === 'development' ?\n  [sagaMiddleware, logger] :\n  [sagaMiddleware];\n\nconst store = createStore(\n  // tells the saga middleware to use the rootReducer\n  // rootSaga contains all of our other reducers\n  rootReducer,\n  // adds all middleware to our project including saga and logger\n  applyMiddleware(...middlewareList),\n);\n\n// tells the saga middleware to use the rootSaga\n// rootSaga contains all of our other sagas\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('react-root'),\n);\n"],"sourceRoot":""}